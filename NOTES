# -*- mode:org -*-
#+Options: ^:nil
#+CATEGORY: bugpile

A collection of working notes.

* Notes
** proposed org-export integration

From: Nicolas Goaziou <n.goaziou@gmail.com>
Subject: Re: Requesting feedback on proposed iorg (interactive web export for Org) implementation and org-element integration
To: Eric Schulte <eric.schulte@gmx.com>
Cc: Bastien <bzg@gnu.org>,  Thorsten Jolitz <tjolitz@googlemail.com>
Date: Tue, 12 Jun 2012 14:15:35 +0200 (1 hour, 29 minutes, 45 seconds ago)

Hello,

Eric Schulte <eric.schulte@gmx.com> writes:

> After it was decided in the beginning of this week that the iOrg web
> framework (my GSoC 2012 project based on Org-mode and Elnode [1]) will
> use the new Org export engine, we (Eric and me) had a deeper look at it
> and tried to figure out where to interact with the exporter.

Nice. I'll try to help as much as I can.

> In one sentence, our goal is to let the user specifiy via headline tags
> and properties which elements of the Org buffer he wants to export as
> HTML form fields (like <input..., <select... etc) with related HTML
> attributes instead of simply as static HTML.
>
> Although there is still quite a bit of guessing involved, we developed
> an implementation plan, but we would really like to hear your opinion,
> if you think its a sane and feasible approach, or if there are other
> more natural options.
>
> What we want:
>
>   During the export process, the exporter should have access to all the
>   iOrg related info (stored in headline tags and properties) to decide
>   for each Org buffer element if a post-process filter function that
>   turns the static HTML into an HTML form field is applied of not.

A transcoder function has access to full parse tree anyway. A set of
topology functions is defined in org-export.el (i.e.
`org-export-get-parent', `org-export-get-parent-headline'...) to do the
job.

>   The filter function should then have access to all iOrg info related
>   to the HTML element to be post-processed, to be able to set all its
>   HTML attributes as specified by the user (e.g. the action=URL
>   attribute for the form element, or rows= and cols= attributes for a
>   <textarea...  field).

In org-export's lingo, a filter is a set of functions applied on output
data (in this case HTML code). That's definitely not what you want since
you would lose every contextual information in the process. For example,
a filter applied to a paragraph can't access to its surrounding
elements.

> How we think it could be done:
>
>   Imagine an Org headline like the following.
>
>   #+begin_src org
>     *** TODO Make me a HTML-form with checkboxes                         :iorg:
>         :PROPERTIES:
>         :html-form:     http://localhost:8000/make-me-interactive-html
>         :html-button-value: Send edits
>         :END:
>
>     - [X] Should this entry be wrapped into a HTML-form?
>     - [X] Does the :iorg: tag tell the exporter to apply a filter?
>     - [X] Are there two buttons, submit and reset, at the bottom-right?
>     - [ ] Should this checkbox be opt-out like the ones above?
>
>     some text some text some text some text some text some text
>     some text some text some text some text some text some text
>     some text some text some text some text some text some text
>     some text some text some text some text some text some text
>   #+end_source
>
>   The :iorg: tag tells the exporter to apply post-process filters to
>   this entry and its contents resulting in an HTML form with a checkbox
>   group and a text area and a button named "Send edits".
>
>   Is there something analogous to tags/properties which could be applied
>   below the subtree level e.g., to only tag a particular list or
>   paragraph inside of a subtree for iorg processing?

You may add HTML attributes to a paragraph or a list:

#+begin_src org
#+ATTR_HTML: :form http://localhost:8000/make-me-interactive.html
#+ATTR_HTML: :button-value "Send edits"
Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod
tempor incididunt ut labore et dolore magna aliqua. Ut enimad minim
veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea
commodo consequat. Duis aute irure dolor in reprehenderit in voluptate
velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint
occaecat cupidatat non proident, sunt in culpa qui officia deserunt
mollit anim id est laborum.
#+end_src

>   We imagine two options for integrating iorg processing with the
>   existing org-e-html exporter.

If I understand correctly, you want to add a layer of syntax in order to
integrate <form> tags in e-html output. In this case, I think the most
appropriate way to do so is to define a new back-end, `iorg', derived
from `e-html' with `org-export-define-derived-backend' macro.

Assuming, for the example's sake, that you only want to make headlines
into forms, lists into radio and paragraphs into textarea, you only have
to define a transcoder function for each of them. Here is an example,
producing cheesy HTML:

#+begin_src emacs-lisp
(org-export-define-derived-backend iorg e-html
  :translate-alist ((headline . org-iorg-headline)
                    (item . org-iorg-item)
                    (paragraph . org-iorg-paragraph)
                    (plain-list . org-iorg-plain-list)
                    (section . org-iorg-section)))

(defun org-iorg-headline (headline contents info)
  "Transcode element HEADLINE into HTML syntax.
CONTENTS is the contents of the headline.  INFO is a plist used
as a communication channel."
  (if (not (member "iorg" (org-export-get-tags headline info)))
      ;; Fallback to regular HTML.
      (funcall (assq 'headline org-e-html-translate-alist)
               headline contents info)
    ;; Otherwise, build <form> template.
    (let ((action (org-element-property :html-form headline))
          (submit (org-element-property :html-button-value headline)))
      (concat (format "<form method=post action=\"%s\">\n" action)
              "<table border=0>\n"
              contents
              "<tr>\n"
              (format "<td><input type=\"reset\"></td>\n")
              (format "<td><input type=\"submit\" value=\"%s\"></td>\n" submit)
              "</tr>\n"
              "</table>\n"
              "</form>"))))

(defun org-iorg-section (section contents info)
  "Transcode element HEADLINE into HTML syntax.
CONTENTS is the contents of the headline.  INFO is a plist used
as a communication channel."
  (let ((headline (org-export-get-parent section)))
    (if (or (not headline)
            (not (member "iorg"
                         (org-export-get-tags headline info))))
        ;; Fallback to regular HTML.
        (funcall (assq 'section org-e-html-translate-alist)
                 section contents info)
      ;; Otherwise, export CONTENTS as-is.
      contents)))

(defun org-iorg-paragraph (paragraph contents info)
  "Transcode element PARAGRAPH into HTML syntax.
CONTENTS is the contents of the paragraph.  INFO is a plist used
as a communication channel."
  (let ((headline (org-export-get-parent-headline paragraph)))
    (if (or (not headline)
            (not (member "iorg" (org-export-get-tags headline info))))
        ;; Fallback to regular HTML.
        (funcall (assq 'paragraph org-e-html-translate-alist)
                 paragraph contents info)
      (let ((attributes (org-export-read-attribute :attr_html paragraph)))
        (cond
         ;; If the paragraph is contained within an item, do not make
         ;; it a textarea.
         ((catch 'item-found
            (mapc (lambda (parent)
                    (when (eq (org-element-type parent) 'item)
                      (throw 'item-found t)))
                  (org-export-get-genealogy paragraph))
            nil)
          contents)
         ;; If paragraph has no special attribute, consider it
         ;; is plain text.
         ((not attributes)
          (format "<tr>\n<td colspan=2>\n%s</td>\n</tr>" contents))
         ;; Otherwise build <textarea> template.
         (t (format "<tr>
<td>%s</td>
<td>
<textarea%s>\n%s</textarea>
</td>
</tr>"
                    (or (plist-get attributes :title) "")
                    (let (options)
                      (mapc
                       (lambda (prop)
                         (let ((value (plist-get attributes prop)))
                           (when value
                             (setq options
                                   (concat options
                                           (format " %s=\"%s\""
                                                   (substring (symbol-name prop)
                                                              1)
                                                   value))))))
                       '(:cols :rows :name :readonly :value))
                      options)
                    contents)))
        ))))

(defun org-iorg-plain-list (plain-list contents info)
  "Transcode element PLAIN-LIST into HTML syntax.
CONTENTS is the contents of the plain-list.  INFO is a plist used
as a communication channel."
  (let ((headline (org-export-get-parent-headline plain-list)))
    (if (or (not headline)
            (not (member "iorg" (org-export-get-tags headline info))))
        ;; Fallback to regular HTML.
        (funcall (assq 'plain-list org-e-html-translate-alist)
                 plain-list contents info)
      ;; If plain-list is descriptive make it a select menu, otherwise
      ;; simply return CONTENTS as-is.
      (let ((attributes (org-export-read-attribute :attr_html plain-list)))
        (if (eq (org-element-property :type plain-list) 'descriptive)
            (format "<tr>
<td>%s</td>
<td>
<select name=\"%s\">\n%s</select>
</td>
</tr>"
                    (or (plist-get attributes :name) "")
                    contents)
          contents)))))

(defun org-iorg-item (item contents info)
  "Transcode element ITEM into HTML syntax.
CONTENTS is the contents of the ITEM.  INFO is a plist used as
a communication channel."
  (let ((headline (org-export-get-parent-headline item)))
    (if (or (not headline)
            (not (member "iorg" (org-export-get-tags headline info))))
        ;; Fallback to regular HTML.
        (funcall (assq 'item org-e-html-translate-alist) item contents info)
      ;; Otherwise find appropriate input type and build tag.
      ;; Attributes are read from parent plain-list since items have
      ;; no affiliated keyword attached to them.
      (let ((plain-list (org-export-get-parent item)))
        ;; List is descriptive: item is an option line whose value is
        ;; item's tag.
        (if (eq (org-element-property :type plain-list) 'descriptive)
            (format "<option value=\"%s\">%s</option>"
                    (org-export-data (org-element-property :tag item) info)
                    (org-trim contents)))
        ;; Otherwise build appropriate input type.  Assume item's
        ;; contents is the text before the input tag.
        (let* ((attributes (org-export-read-attribute :attr_html plain-list))
               (checkboxp (org-element-property :checkbox item))
               (type (if checkboxp 'checkbox (plist-get attributes :type))))
          (format "<tr>
<td>%s</td>
<td><input type=%s name=\"%s\"%s></td>
</tr>"
                  contents
                  type
                  (or (plist-get attributes :name) "")
                  (cond ((not (eq type 'checkbox)) "")
                        ((eq checkboxp 'on) " checked")
                        (t " unchecked"))))))))
#+end_src

It will export an Org buffer to string with:

  (org-export-as 'iorg)

You can wrap this into a file, for example with:

#+begin_src org
(defun org-iorg-export-to-html
  (&optional subtreep visible-only body-only ext-plist pub-dir)
  "Export current buffer to a HTML file.

If narrowing is active in the current buffer, only export its
narrowed part.

If a region is active, export that region.

When optional argument SUBTREEP is non-nil, export the sub-tree
at point, extracting information from the headline properties
first.

When optional argument VISIBLE-ONLY is non-nil, don't export
contents of hidden elements.

When optional argument BODY-ONLY is non-nil, only write code
between \"<body>\" and \"</body>\".
xo
EXT-PLIST, when provided, is a property list with external
parameters overriding Org default settings, but still inferior to
file-local settings.

When optional argument PUB-DIR is set, use it as the publishing
directory.

Return output file's name."
  (interactive)
  (let* ((extension (concat "." org-e-html-extension))
	 (file (org-export-output-file-name extension subtreep pub-dir))
	 (org-export-coding-system org-e-html-coding-system))
    (org-export-to-file 'iorg file subtreep visible-only body-only ext-plist)))
#+end_src

One problem is that I'm not sure how to set value for <input> items
since attributes can only be applied to a plain list and not to
items. Perhaps one could use a description list and use the tag as the
value?

Let me know if you have any question.


Regards,

-- 
Nicolas Goaziou


** Torvalds on bug trackers
http://yarchive.net/comp/linux/bug_tracking.html

#+begin_quote
The thing is, bugzilla is totally broken because it's designed to help
track bugs, but it's *not* designed to actually handle the much harder
problem, which is to actually get the *right* developers to be aware
of the *right* bugs!
#+end_quote

** suggestion for auth issues
From =#emacs= WRT: how we can handle authentication issues moving forward.
: 10:44 < nicferrier> _schulte_: I think you should ignore the auth issues and just use a 
:                     client side cookie. that interface can always be improved.
: 10:44 < _schulte_> nicferrier: I vigorously agree

** GSoC mid-term/final evaluations
*** How do evaluations work? 
Quote from GSoC [[http://www.google-melange.com/document/show/gsoc_program/google/gsoc2012/faqs][faq]]:

#+begin_quote
Google will pre-publish the evaluation questions for both students
and mentors. Mentors will fill out mid-term and final evaluations
for their students via the Google Summer of Code 2012 site. These
evaluations will be visible in the system to the mentor and the
mentoring organization's administrator(s). Students will fill out a
mid-term and final evaluation of their mentors online as well, and
their evaluations will only be visible in the system to the
mentoring organization's administrator(s). Program administrators
from Google will have access to all evaluation data.

Any student who does not submit an evaluation by the evaluation
deadline will fail that evaluation, regardless of the grade the
mentor gives the student. If a student submits his or her evaluation
on time but the mentor does not, then the student is  in an
"undecided" state until the program administrators can speak to the
mentor and determine the student's grade.

Students who fail the mid-term are immediately removed from the
program: it's not possible to fail the mid-term, stay in the
program, and then have a final evaluation.

In almost all cases, students will never see their mentor's
evaluation of their progress, nor will a mentor see a student's
evaluation of her/his mentorship. However, in the case where the
mentoring organization's administrator and a student's mentor are
one and the same, the student's evaluation will be shared with the
mentor. If you are a student in a situation where your mentor is
also your organization's administrator and you would like to discuss
an issue with the program, please contact the Google Summer of Code
program administrators. Organization administrators are expected to
review mid-term and final evaluations and to provide course
corrections where necessary.
In some cases, Google's program administrators may need to share the
results of evaluations with the student and mentor, such as to
arbitrate when payment should not be made. Should this need arise,
all parties will be notified in advance.

In the unlikely event that a mentor and organization administrator
do not agree on a student's grade for any evaluation, the decision
of the organization administrator is the final one.

In the also unlikely event that a student does not agree with a
mentoring organization's evaluation decision at either the midterm
or the final, the student may choose to submit his/her entire
project plan, timeline and code sample to Google's program
administrators. Google will choose an independent engineer to review
the code and arbitrate the decision. The decision of Google's
independent engineer is final.

Finally, any mentor who misses a deadline for an evaluation of his/
her student without notifying the program administrators beforehand
will not be allowed to attend the Google Summer of Code mentor
summit. Timely evaluations of Google Summer of Code students are
crucial to us.
#+end_quote

** HTML
*** Buttons

button

+----------------------------------------------------------------------------------------------------------------------------------------+
|  Bedeutung   |Erzeugt einen Klick-Button - siehe Seite Beschreibung.                                                                   |
|--------------+-------------------------------------------------------------------------------------------------------------------------|
|HTML-Varianten|Erlaubt in den Varianten Seite Strict, Transitional, Frameset                                                            |
|--------------+-------------------------------------------------------------------------------------------------------------------------|
|Elternelemente|Darf innerhalb der folgenden HTML-Elemente vorkommen:                                                                    |
|              |[Block-Elemente] | [Inline-Elemente] (außer button)                                                                      |
|--------------+-------------------------------------------------------------------------------------------------------------------------|
|              |Darf #PCDATA und folgende andere HTML-Elemente enthalten:                                                                |
| Kindelemente |abbr | acronym | address | applet | b | basefont | bdo | big | blockquote | br | center | cite | code | dfn | dl | dir | |
|              |div | em | font | h1-6 | hr | i | img | kbd | map | menu | noframes | noscript | object | ol | p | pre | q | samp |      |
|              |script | small | span | strong | sub | sup | table | tt | ul | var                                                       |
|--------------+-------------------------------------------------------------------------------------------------------------------------|
|  Attribute   |siehe Seite Attribute                                                                                                    |
+----------------------------------------------------------------------------------------------------------------------------------------+


button

+----------------------------------------------------------------------------------------------------------------------------------------+
|  Bedeutung   |Erzeugt einen Klick-Button - siehe Seite Beschreibung.                                                                   |
|--------------+-------------------------------------------------------------------------------------------------------------------------|
|   Attribut   |  Wert   |           HTML-Varianten           |erforderlich?|                         Bedeutung                          |
|--------------+---------+------------------------------------+-------------+------------------------------------------------------------|
|accesskey     |#CDATA   |Erlaubt in den Varianten Seite      |nein         |bestimmt ein einzelnes Zeichen als Hotkey für den           |
|              |         |Strict, Transitional, Frameset      |             |Tastaturzugriff auf den Button                              |
|--------------+---------+------------------------------------+-------------+------------------------------------------------------------|
|              |disabled |Erlaubt in den Varianten Seite      |             |                                                            |
|disabled      |(leeres  |Strict, Transitional, Frameset      |nein         |bestimmt, dass der Button nicht betätigt werden kann        |
|              |Attribut)|                                    |             |                                                            |
|--------------+---------+------------------------------------+-------------+------------------------------------------------------------|
|name          |#CDATA   |Erlaubt in den Varianten Seite      |nein         |bestimmt einen Namen für den Button                         |
|              |         |Strict, Transitional, Frameset      |             |                                                            |
|--------------+---------+------------------------------------+-------------+------------------------------------------------------------|
|onblur        |#CDATA   |Erlaubt in den Varianten Seite      |nein         |beim Verlassen des verweis-sensitiven Bereichs...           |
|              |         |Strict, Transitional, Frameset      |             |(Script-Code)                                               |
|--------------+---------+------------------------------------+-------------+------------------------------------------------------------|
|onfocus       |#CDATA   |Erlaubt in den Varianten Seite      |nein         |wenn verweis-sensitiver Bereich den Fokus hat...            |
|              |         |Strict, Transitional, Frameset      |             |(Script-Code)                                               |
|--------------+---------+------------------------------------+-------------+------------------------------------------------------------|
|tabindex      |[Zahl]   |Erlaubt in den Varianten Seite      |nein         |bestimmt die Tabulator-Reihenfolge für Buttons durch Angabe |
|              |         |Strict, Transitional, Frameset      |             |einer Zahl                                                  |
|--------------+---------+------------------------------------+-------------+------------------------------------------------------------|
|              |button | |Erlaubt in den Varianten Seite      |nein         |                                                            |
|type          |submit | |Strict, Transitional, Frameset      |(Default:    |bestimmt den Typ des Buttons                                |
|              |reset    |                                    |submit)      |                                                            |
|--------------+---------+------------------------------------+-------------+------------------------------------------------------------|
|value         |#CDATA   |Erlaubt in den Varianten Seite      |nein         |bestimmt den Absendewert des Buttons                        |
|              |         |Strict, Transitional, Frameset      |             |                                                            |
|----------------------------------------------------------------------------------------------------------------------------------------|
|[Universalattribute]                                                                                                                    |
|----------------------------------------------------------------------------------------------------------------------------------------|
|Abhängigkeiten|siehe Seite Elemente                                                                                                     |
+----------------------------------------------------------------------------------------------------------------------------------------+

** Libraries
*** Elnode
**** Starting an elnode server
=nicferrier= suggests this script to launch an elnode server.
https://gist.github.com/2628802

**** Setup elnode
   :PROPERTIES:
   :results:  silent
   :END:
An abbreviated version of the instructions from
https://github.com/nicferrier/elnode.

1. clone locally to somewhere on the =load-path=.
   #+begin_src sh
   git clone git://github.com/nicferrier/elnode.git
   #+end_src
2. load up elnode
   #+begin_src emacs-lisp
   (require 'elnode)
   #+end_src
3. define a simple handler function
   #+begin_src emacs-lisp
     (defun simple-handler (httpcon)
       (elnode-http-start httpcon "200" '("Content-type" . "text/html"))
       (elnode-http-return httpcon "<html><b>HELLO!</b></html>"))
   #+end_src
4. start the server
   #+begin_src emacs-lisp
     (elnode-start 'simple-handler :port 3333 :host "localhost")
   #+end_src
5. point your browser at elnode http://localhost:3333/
6. stop the server
   #+begin_src emacs-lisp
     (elnode-stop 3333)
   #+end_src

**** API

#+begin_src emacs-lisp
136 matches for "(def" in buffer: elnode.el
     59:(defconst ELNODE-FORM-DATA-TYPE "application/x-www-form-urlencoded"
     62:(defgroup elnode nil
     66:(defvar elnode-server-socket nil
     76:(defun elnode-trunc (data)
     82:(defun elnode-trim (str)
     89:(defcustom elnode-log-files-directory "~/.elnodelogs"
     98:(defvar elnode-log-buffer-position-written 0
    104:(defvar elnode-log-buffer-max-size 1000
    107:(defvar elnode-log-buffer-datetime-format "%Y%m%d%H%M%S"
    110:(defun elnode-log-buffer-log (text buffer-or-name &optional filename)
    150:(defcustom elnode-error-log-to-messages t
    155:(defvar elnode-server-error-log "*elnode-server-error*"
    158:(defvar elnode--do-error-logging t
    161:(defun elnode--get-error-log-buffer ()
    165:(defun elnode-error (msg &rest args)
    182:(defun elnode--log-filename (logname)
    193:(defun elnode-log-access (logname httpcon)
    217:(defvar elnode--deferred '()
    220:(defun elnode-defer-now (handler)
    230:(defmacro elnode-defer-or-do (guard &rest body)
    243:(defun elnode--deferred-add (httpcon handler)
    248:(defun elnode--deferred-processor ()
    269:(defvar elnode--defer-timer nil
    274:(defun elnode--init-deferring ()
    281:(defun elnode-deferred-queue (arg)
    292:(defun elnode-deferred-queue-stop ()
    301:(defcustom elnode-default-response-table
    323:(defun elnode--format-response (status &optional msg)
    333:(defun elnode--sentinel (process status)
    361:(defun elnode--process-send-string (proc data)
    371:(defun elnode--process-send-eof (proc)
    384:(defun elnode--http-parse (httpcon)
    438:(defun elnode--http-make-hdr (method resource &rest headers)
    480:(defun elnode--get-server-prop (process key)
    490:(defun elnode--make-send-string ()
    497:(defun elnode--make-send-eof ()
    504:(defun elnode--filter (process data)
    578:(defmacro with-elnode-mock-server (handler &rest body)
    599:(defun* elnode-test-call (path
    698:(defun elnode-test-handler (httpcon)
    707:(defun elnode--log-fn (server con msg)
    713:(defvar elnode-handler-history '()
    716:(defvar elnode-port-history '()
    719:(defvar elnode-host-history '()
    723:(defun* elnode-start (request-handler
    742:(defun nic-server (httpcon)
    799:(defun elnode-stop (port)
    819:(defun elnode-list-buffers ()
    835:(defun elnode-time-encode (time-str)
    842:(defun elnode--http-hdr (httpcon)
    850:(defun elnode-http-header (httpcon name &optional convert)
    877:(defun elnode-http-cookie (httpcon name)
    899:(defun elnode--http-parse-status (httpcon &optional property)
    913:(defun elnode--http-parse-resource (httpcon &optional property)
    938:(defun elnode-http-pathinfo (httpcon)
    944:(defun elnode-http-query (httpcon)
    950:(defun elnode--http-param-part-decode (param-thing)
    977:(defun elnode--http-query-to-alist (query)
    993:(defun elnode--alist-merge (a b &optional operator)
   1017:(defun elnode--http-post-to-alist (httpcon)
   1029:(defun elnode-http-params (httpcon)
   1061:(defun elnode-http-param (httpcon name)
   1070:(defun elnode-http-method (httpcon)
   1076:(defun elnode-http-version (httpcon)
   1082:(defun elnode-http-send-string (httpcon str)
   1096:(defvar elnode-http-codes-alist
   1110:(defun elnode--http-result-header (hdr-alist)
   1131:(defun elnode-http-start (httpcon status &rest header)
   1165:(defun elnode--http-end (httpcon)
   1179:(defun elnode-http-return (httpcon &optional data)
   1198:(defun elnode-send-json (httpcon data &optional content-type)
   1209:(defun elnode-send-status (httpcon status &optional msg)
   1221:(defun elnode-send-404 (httpcon &optional msg)
   1227:(defun elnode-send-400 (httpcon &optional msg)
   1233:(defun elnode-send-500 (httpcon &optional msg)
   1240:(defun elnode-send-redirect (httpcon location &optional type)
   1251:(defun elnode-normalize-path (httpcon handler)
   1268:(defun elnode--mapper-find-mapping (match-path mapping-table)
   1274:(defun elnode--mapper-find (httpcon path mapping-table)
   1314:(defun elnode-http-mapping (httpcon &optional part)
   1344:(defun elnode-get-targetfile (httpcon docroot)
   1367:(defvar elnode--do-access-logging-on-dispatch t
   1370:(defun* elnode--dispatch-proc (httpcon
   1397:(defun elnode-dispatcher (httpcon url-mapping-table &optional function-404)
   1415:(defun my-server (httpcon)
   1434:(defun* elnode-hostpath-dispatcher (httpcon
   1468:(defcustom elnode-hostpath-default-table
   1485:(defun elnode-hostpath-default-handler (httpcon)
   1496:(defcustom elnode-log-worker-elisp nil
   1503:(defcustom elnode-log-worker-responses nil
   1510:(defun elnode--worker-filter-helper (process
   1549:(defun elnode--worker-lisp-helper (child-lisp)
   1558:(defmacro elnode-worker-elisp (output-stream bindings &rest body)
   1709:(defun elnode-worker-last-code ()
   1723:(defun elnode-wait-for-exit (process)
   1730:(defun elnode--child-process-sentinel (process status)
   1766:(defun elnode--child-process-filter (process data)
   1784:(defun elnode-child-process (httpcon program &rest args)
   1816:(defun elnode-auth (httpcon)
   1819:(defcustom elnode-send-file-program "/bin/cat"
   1827:(defun elnode--buffer-template (file-buf replacements)
   1867:(defvar elnode-webserver-visit-file nil
   1873:(defun* elnode-send-file (httpcon targetfile
   1936:(defmacro elnode-method (&rest method-mappings)
   1962:(defun elnode-make-redirecter (location &optional type)
   1971:(defun* elnode-make-send-file  (filename &key preamble mime-types )
   1990:(defun elnode--under-docroot-p (target-file doc-root)
   1999:(defun elnode-not-found (httpcon target-file)
   2006:(defun elnode-cached-p (httpcon target-file)
   2017:(defun elnode-cached (httpcon)
   2023:(defmacro elnode-docroot-for (doc-root with target-file-var
   2071:(defcustom elnode-webserver-docroot "~/public_html"
   2079:(defcustom elnode-webserver-extra-mimetypes '(("text/plain" . "creole")
   2088:(defcustom elnode-webserver-index '("index.html" "index.htm")
   2096:(defun elnode-url-encode-path (path)
   2112:(defcustom elnode-webserver-index-page-template "<html>
   2132:(defcustom elnode-webserver-index-file-template "<a href='%s'>%s</a><br/>\r\n"
   2139:(defun elnode--webserver-index (docroot targetfile pathinfo)
   2164:(defun elnode--webserver-handler-proc (httpcon docroot mime-types)
   2195:(defun elnode-webserver-handler-maker (&optional docroot extra-mime-types)
   2217:(defun elnode-webserver (httpcon)
   2238:(defgroup elnode-wikiserver nil
   2242:(defcustom elnode-wikiserver-wikiroot "~/wiki"
   2247:(defcustom elnode-wikiserver-body-header
   2253:(defcustom elnode-wikiserver-body-footer
   2271:(defun elnode--wiki-call (out-buf page-text page)
   2302:(defun elnode-wiki-send (httpcon wikipage &optional pageinfo)
   2324:(defun elnode-wiki-handler (httpcon wikiroot)
   2372:(defun elnode-wikiserver-test ()
   2377:(defun elnode-wikiserver (httpcon)
   2392:(defcustom elnode-init-port 8000
   2396:(defcustom elnode-init-host "localhost\"
   2401:(defun elnode-init ()
   2426:(defcustom elnode-do-init 't
   2441:(defvar elnode--inited nil
#+end_src

*** Org-export
**** API

#+begin_src emacs-lisp
186 matches for "(def" in buffer: org-export.el
    110:(defconst org-export-max-depth 19
    113:(defconst org-export-option-alist
    174:(defconst org-export-special-keywords
    181:(defconst org-export-filters-alist
    249:(defconst org-export-default-inline-image-rule
    273:(defgroup org-export nil
    278:(defgroup org-export-general nil
    283:(defcustom org-export-with-archived-trees 'headline
    299:(defcustom org-export-with-author t
    306:(defcustom org-export-with-clocks nil
    313:(defcustom org-export-with-creator 'comment
    326:(defcustom org-export-creator-string
    334:(defcustom org-export-with-drawers t
    350:(defcustom org-export-with-email nil
    357:(defcustom org-export-with-emphasize t
    368:(defcustom org-export-exclude-tags '("noexport")
    380:(defcustom org-export-with-fixed-width t
    395:(defcustom org-export-with-footnotes t
    402:(defcustom org-export-headline-levels 3
    413:(defcustom org-export-default-language "en"
    420:(defcustom org-export-preserve-breaks nil
    430:(defcustom org-export-with-entities t
    444:(defcustom org-export-with-planning nil
    451:(defcustom org-export-with-priority nil
    461:(defcustom org-export-with-section-numbers t
    472:(defcustom org-export-select-tags '("export")
    485:(defcustom org-export-with-special-strings t
    502:(defcustom org-export-with-sub-superscripts t
    531:(defcustom org-export-with-toc t
    549:(defcustom org-export-with-tables t
    561:(defcustom org-export-with-tags t
    576:(defcustom org-export-with-tasks t
    593:(defcustom org-export-time-stamp-file t
    602:(defcustom org-export-with-timestamps t
    618:(defcustom org-export-with-todo-keywords t
    624:(defcustom org-export-allow-BIND 'confirm
    634:(defcustom org-export-snippet-translation-alist nil
    648:(defcustom org-export-coding-system nil
    653:(defcustom org-export-copy-to-kill-ring t
    658:(defcustom org-export-initial-scope 'buffer
    666:(defcustom org-export-show-temporary-export-buffer t
    676:(defcustom org-export-dispatch-use-expert-ui nil
    956:(defun org-export-get-environment (&optional backend subtreep ext-plist)
    990:(defun org-export-parse-option-keyword (options &optional backend)
   1019:(defun org-export-get-subtree-options ()
   1046:(defun org-export-get-inbuffer-options (&optional backend files)
   1174:(defun org-export-get-buffer-attributes ()
   1200:(defun org-export-get-global-options (&optional backend)
   1219:(defun org-export-store-footnote-definitions (info)
   1260:(defvar org-export-allow-BIND-local nil)
   1261:(defun org-export-confirm-letbind ()
   1272:(defun org-export-install-letbind-maybe ()
   1302:(defun org-export-collect-tree-properties (data info)
   1366:(defun org-export-get-min-level (data options)
   1384:(defun org-export-collect-headline-numbering (data options)
   1408:(defun org-export-populate-ignore-list (data options)
   1440:(defun org-export--selected-trees (data info)
   1467:(defun org-export--skip-p (blob options select-tags)
   1547:(defun org-export-transcoder (blob info)
   1557:(defun org-export-data (data info)
   1647:(defun org-export-interpret-p (blob info)
   1671:(defsubst org-export-expand (blob contents)
   1679:(defun org-export-ignore-element (element info)
   1726:(defvar org-export-before-parsing-hook nil
   1736:(defvar org-export-filter-parse-tree-functions nil
   1743:(defvar org-export-filter-final-output-functions nil
   1750:(defvar org-export-filter-plain-text-functions nil
   1760:(defvar org-export-filter-center-block-functions nil
   1766:(defvar org-export-filter-clock-functions nil
   1772:(defvar org-export-filter-drawer-functions nil
   1778:(defvar org-export-filter-dynamic-block-functions nil
   1784:(defvar org-export-filter-headline-functions nil
   1790:(defvar org-export-filter-inlinetask-functions nil
   1796:(defvar org-export-filter-plain-list-functions nil
   1802:(defvar org-export-filter-item-functions nil
   1808:(defvar org-export-filter-comment-functions nil
   1814:(defvar org-export-filter-comment-block-functions nil
   1820:(defvar org-export-filter-example-block-functions nil
   1826:(defvar org-export-filter-export-block-functions nil
   1832:(defvar org-export-filter-fixed-width-functions nil
   1838:(defvar org-export-filter-footnote-definition-functions nil
   1844:(defvar org-export-filter-horizontal-rule-functions nil
   1850:(defvar org-export-filter-keyword-functions nil
   1856:(defvar org-export-filter-latex-environment-functions nil
   1862:(defvar org-export-filter-babel-call-functions nil
   1868:(defvar org-export-filter-paragraph-functions nil
   1874:(defvar org-export-filter-planning-functions nil
   1880:(defvar org-export-filter-property-drawer-functions nil
   1886:(defvar org-export-filter-quote-block-functions nil
   1893:(defvar org-export-filter-quote-section-functions nil
   1899:(defvar org-export-filter-section-functions nil
   1905:(defvar org-export-filter-special-block-functions nil
   1911:(defvar org-export-filter-src-block-functions nil
   1917:(defvar org-export-filter-table-functions nil
   1923:(defvar org-export-filter-table-cell-functions nil
   1929:(defvar org-export-filter-table-row-functions nil
   1935:(defvar org-export-filter-verse-block-functions nil
   1944:(defvar org-export-filter-bold-functions nil
   1950:(defvar org-export-filter-code-functions nil
   1956:(defvar org-export-filter-entity-functions nil
   1962:(defvar org-export-filter-export-snippet-functions nil
   1968:(defvar org-export-filter-footnote-reference-functions nil
   1974:(defvar org-export-filter-inline-babel-call-functions nil
   1980:(defvar org-export-filter-inline-src-block-functions nil
   1986:(defvar org-export-filter-italic-functions nil
   1992:(defvar org-export-filter-latex-fragment-functions nil
   1998:(defvar org-export-filter-line-break-functions nil
   2004:(defvar org-export-filter-link-functions nil
   2010:(defvar org-export-filter-macro-functions nil
   2016:(defvar org-export-filter-radio-target-functions nil
   2022:(defvar org-export-filter-statistics-cookie-functions nil
   2028:(defvar org-export-filter-strike-through-functions nil
   2034:(defvar org-export-filter-subscript-functions nil
   2040:(defvar org-export-filter-superscript-functions nil
   2046:(defvar org-export-filter-target-functions nil
   2052:(defvar org-export-filter-timestamp-functions nil
   2058:(defvar org-export-filter-underline-functions nil
   2064:(defvar org-export-filter-verbatim-functions nil
   2070:(defun org-export-filter-apply-functions (filters value info)
   2080:(defun org-export-install-filters (info)
   2135:(defun org-export-as
   2220:(defun org-export-to-buffer
   2243:(defun org-export-to-file
   2268:(defun org-export-output-file-name (extension &optional subtreep pub-dir)
   2315:(defmacro org-export-with-current-buffer-copy (&rest body)
   2345:(defun org-export-expand-include-keyword (&optional included dir)
   2428:(defun org-export-prepare-file-contents (file &optional lines ind minlevel)
   2519:(defun org-export-snippet-backend (export-snippet)
   2544:(defun org-export-collect-footnote-definitions (data info)
   2577:(defun org-export-footnote-first-reference-p (footnote-reference info)
   2609:(defun org-export-get-footnote-definition (footnote-reference info)
   2616:(defun org-export-get-footnote-number (footnote info)
   2676:(defun org-export-get-relative-level (headline info)
   2682:(defun org-export-low-level-p (headline info)
   2697:(defun org-export-get-headline-number (headline info)
   2702:(defun org-export-numbered-headline-p (headline info)
   2709:(defun org-export-number-to-roman (n)
   2725:(defun org-export-first-sibling-p (headline info)
   2731:(defun org-export-last-sibling-p (headline info)
   2760:(defun org-export-solidify-link-text (s)
   2765:(defun org-export-get-coderef-format (path desc)
   2774:(defun org-export-inline-image-p (link &optional rules)
   2798:(defun org-export-resolve-fuzzy-link (link info)
   2867:(defun org-export-resolve-id-link (link info)
   2883:(defun org-export-resolve-coderef (ref info)
   2916:(defun org-export-expand-macro (macro info)
   2944:(defun org-export-get-ordinal (element info &optional types predicate)
   3028:(defun org-export-get-loc (element info)
   3057:(defun org-export-unravel-code (element)
   3108:(defun org-export-format-code (code fun &optional num-lines ref-alist)
   3137:(defun org-export-format-code-default (element info)
   3201:(defun org-export-table-has-special-column-p (table)
   3222:(defun org-export-table-has-header-p (table info)
   3240:(defun org-export-table-row-is-special-p (table-row info)
   3276:(defun org-export-table-row-group (table-row info)
   3298:(defun org-export-table-cell-width (table-cell info)
   3333:(defun org-export-table-cell-alignment (table-cell info)
   3392:(defun org-export-table-cell-borders (table-cell info)
   3482:(defun org-export-table-cell-starts-colgroup-p (table-cell info)
   3494:(defun org-export-table-cell-ends-colgroup-p (table-cell info)
   3504:(defun org-export-table-row-starts-rowgroup-p (table-row info)
   3513:(defun org-export-table-row-ends-rowgroup-p (table-row info)
   3522:(defun org-export-table-row-starts-header-p (table-row info)
   3530:(defun org-export-table-row-ends-header-p (table-row info)
   3538:(defun org-export-table-dimensions (table info)
   3559:(defun org-export-table-cell-address (table-cell info)
   3593:(defun org-export-get-table-cell-at (address table info)
   3631:(defun org-export-collect-headlines (info &optional n)
   3649:(defun org-export-collect-elements (type info &optional predicate)
   3671:(defun org-export-collect-tables (info)
   3680:(defun org-export-collect-figures (info predicate)
   3695:(defun org-export-collect-listings (info)
   3719:(defun org-export-get-genealogy (blob info)
   3751:(defun org-export-get-parent (blob info)
   3757:(defun org-export-get-parent-headline (blob info)
   3767:(defun org-export-get-parent-paragraph (object info)
   3777:(defun org-export-get-parent-table (object info)
   3787:(defun org-export-get-previous-element (blob info)
   3797:(defun org-export-get-next-element (blob info)
   3816:(defun org-export-dispatch ()
   3904:(defun org-export-dispatch-ui (options expertp)
#+end_src

*** Org-e-html
#+begin_src emacs-lisp
165 matches for "(def" in buffer: org-e-html.el
     49:(defvar org-element-string-restrictions)
     50:(defvar org-element-object-restrictions)
     92:(defconst org-e-html-option-alist
    139:(defconst org-e-html-cvt-link-fn
    150:(defvar org-e-html-format-table-no-css)
    151:(defvar htmlize-buffer-places)  ; from htmlize.el
    152:(defvar body-only) ; dynamically scoped into this.
    158:(defgroup org-export-e-html nil
    165:(defcustom org-e-html-pretty-output nil
    173:(defcustom org-e-html-extension "html"
    178:(defcustom org-e-html-xml-declaration
    198:(defvar org-e-html-content-div "content"
    204:(defcustom org-e-html-divs '("preamble" "content" "postamble")
    218:(defconst org-e-html-style-default
    274:(defcustom org-e-html-style-include-default t
    284:(defcustom org-e-html-style ""
    316:(defcustom org-e-html-style-extra ""
    327:(defcustom org-e-html-mathjax-options
    363:(defcustom org-e-html-style-include-scripts t
    370:(defconst org-e-html-scripts
    398:(defcustom org-e-html-mathjax-template
    447:(defcustom org-e-html-preamble t
    465:(defcustom org-e-html-preamble-format '(("en" ""))
    478:(defcustom org-e-html-home/up-format
    494:(defcustom org-e-html-postamble 'auto
    515:(defcustom org-e-html-postamble-format
    534:(defcustom org-e-html-validation-link
    544:(defcustom org-e-html-protect-char-alist
    553:(defconst org-e-html-special-string-regexps
    563:(defcustom org-e-html-todo-kwd-class-prefix ""
    575:(defcustom org-e-html-tag-class-prefix ""
    591:(defcustom org-e-html-inline-images 'maybe
    602:(defcustom org-e-html-inline-image-extensions
    622:(defcustom org-e-html-footnotes-section "<div id=\"footnotes\">
    635:(defcustom org-e-html-footnote-format "<sup>%s</sup>"
    641:(defcustom org-e-html-footnote-separator "<sup>, </sup>"
    671:(defgroup org-export-e-htmlize nil
    676:(defcustom org-export-e-htmlize-output-type 'inline-css
    695:(defcustom org-export-e-htmlize-css-font-prefix "org-"
    700:(defcustom org-export-e-htmlized-org-css-url nil
    717:(defcustom org-e-html-table-tag
    725:(defcustom org-e-html-table-header-tags '("<th scope=\"%s\"%s>" . "</th>")
    735:(defcustom org-e-html-table-data-tags '("<td%s>" . "</td>")
    744:(defcustom org-e-html-table-row-tags '("<tr>" . "</tr>")
    771:(defcustom org-e-html-table-align-individual-fields t
    779:(defcustom org-e-html-table-use-header-tags-for-first-column nil
    793:(defcustom org-e-html-toplevel-hlevel 2
    810:(defcustom org-e-html-link-org-files-as-html t
    831:(defcustom org-e-html-date-format
    839:(defcustom org-e-html-format-headline-function nil
    868:(defcustom org-e-html-text-markup-alist
    891:(defcustom org-e-html-footnote-separator "<sup>, </sup>"
    899:(defcustom org-e-html-active-timestamp-format "\\textit{%s}"
    904:(defcustom org-e-html-inactive-timestamp-format "\\textit{%s}"
    909:(defcustom org-e-html-diary-timestamp-format "\\textit{%s}\"
    917:(defcustom org-e-html-inline-image-rules
    938:(defcustom org-e-html-table-caption-above t
    946:(defcustom org-e-html-format-drawer-function nil
    967:(defcustom org-e-html-format-inlinetask-function nil
   1009:(defcustom org-e-html-quotes
   1047:(defun org-e-html-cvt-org-as-html (opt-plist type path)
   1063:(defun org-e-html-format-org-link (opt-plist type-1 path fragment desc attr
   1140:(defun org-e-html-format-inline-image (src &optional
   1164:(defun org-e-html-bibliography ()
   1184:(defun org-e-html-format-table (lines olines)
   1188:(defun org-e-html-splice-attributes (tag attributes)
   1204:(defun org-export-splice-style (style extra)
   1214:(defun org-export-e-htmlize-region-for-paste (beg end)
   1228:(defun org-export-e-htmlize-generate-css ()
   1262:(defun org-e-html-make-string (n string)
   1265:(defun org-e-html-toc-text (toc-entries)
   1288:(defun* org-e-html-format-toc-headline
   1300:(defun org-e-html-toc (depth info)
   1329:(defun org-e-html-fix-class-name (kwd) 	; audit callers of this function
   1337:(defun org-e-html-format-footnote-reference (n def refcnt)
   1344:(defun org-e-html-format-footnotes-section (section-name definitions)
   1348:(defun org-e-html-format-footnote-definition (fn)
   1357:(defun org-e-html-footnote-section (info)
   1376:(defun org-e-html-format-date (info)
   1388:(defun org-e-html--caption/label-string (caption label info)
   1417:(defun org-e-html--find-verb-separator (s)
   1425:(defun org-e-html--quotation-marks (text info)
   1439:(defun org-e-html--wrap-label (element output)
   1453:(defun org-e-html-meta-info (info)
   1477:(defun org-e-html-style (info)
   1486:(defun org-e-html-mathjax-config (info)
   1517:(defun org-e-html-preamble (info)
   1553:(defun org-e-html-postamble (info)
   1618:(defun org-e-html-template (contents info)
   1700:(defun org-e-html--todo (todo)
   1709:(defun org-e-html--tags (tags)
   1722:(defun* org-e-html-format-headline
   1736:(defun org-e-html-fontify-code (code lang)
   1777:(defun org-e-html-do-format-code
   1808:(defun org-e-html-format-code (element info)
   1832:(defun org-e-html-bold (bold contents info)
   1842:(defun org-e-html-center-block (center-block contents info)
   1853:(defun org-e-html-clock (clock contents info)
   1870:(defun org-e-html-code (code contents info)
   1890:(defun org-e-html-drawer (drawer contents info)
   1906:(defun org-e-html-dynamic-block (dynamic-block contents info)
   1915:(defun org-e-html-entity (entity contents info)
   1924:(defun org-e-html-example-block (example-block contents info)
   1954:(defun org-e-html-export-snippet (export-snippet contents info)
   1963:(defun org-e-html-export-block (export-block contents info)
   1972:(defun org-e-html-fixed-width (fixed-width contents info)
   1990:(defun org-e-html-footnote-reference (footnote-reference contents info)
   2016:(defun org-e-html-format-headline--wrap (headline info
   2053:(defun org-e-html-headline (headline contents info)
   2118:(defun org-e-html-horizontal-rule (horizontal-rule contents info)
   2134:(defun org-e-html-inline-src-block (inline-src-block contents info)
   2146:(defun org-e-html-format-section (text class &optional id)
   2150:(defun org-e-html-inlinetask (inlinetask contents info)
   2177:(defun org-e-html-italic (italic contents info)
   2186:(defun org-e-html-checkbox (checkbox)
   2192:(defun org-e-html-format-list-item (contents type checkbox
   2218:(defun org-e-html-item (item contents info)
   2234:(defun org-e-html-keyword (keyword contents info)
   2263:(defun org-e-html-format-latex (latex-frag processing-type)
   2276:(defun org-e-html-latex-environment (latex-environment contents info)
   2305:(defun org-e-html-latex-fragment (latex-fragment contents info)
   2324:(defun org-e-html-line-break (line-break contents info)
   2332:(defun org-e-html-link--inline-image (link desc info)
   2362:(defvar org-e-html-standalone-image-predicate)
   2363:(defun org-e-html-standalone-image-p (element info &optional predicate)
   2408:(defun org-e-html-link (link desc info)
   2521:(defun org-e-html-macro (macro contents info)
   2530:(defun org-e-html-paragraph (paragraph contents info)
   2553:(defun org-e-html-begin-plain-list (type &optional arg1)
   2562:(defun org-e-html-end-plain-list (type)
   2568:(defun org-e-html-plain-list (plain-list contents info)
   2584:(defun org-e-html-convert-special-strings (string)
   2594:(defun org-e-html-encode-plain-text (s)
   2605:(defun org-e-html-plain-text (text info)
   2643:(defun org-e-html-planning (planning contents info)
   2671:(defun org-e-html-property-drawer (property-drawer contents info)
   2682:(defun org-e-html-quote-block (quote-block contents info)
   2692:(defun org-e-html-quote-section (quote-section contents info)
   2702:(defun org-e-html-section (section contents info) ; FIXME
   2722:(defun org-e-html-radio-target (radio-target text info)
   2733:(defun org-e-html-special-block (special-block contents info)
   2745:(defun org-e-html-src-block (src-block contents info)
   2779:(defun org-e-html-statistics-cookie (statistics-cookie contents info)
   2788:(defun org-e-html-strike-through (strike-through contents info)
   2798:(defun org-e-html-subscript (subscript contents info)
   2807:(defun org-e-html-superscript (superscript contents info)
   2816:(defun org-e-html-table-cell (table-cell contents info)
   2845:(defun org-e-html-table-row (table-row contents info)
   2878:(defun org-e-html-table-first-row-data-cells (table info)
   2889:(defun org-e-html-table--table.el-table (table info)
   2904:(defun org-e-html-table (table contents info)
   2959:(defun org-e-html-target (target contents info)
   2970:(defun org-e-html-timestamp (timestamp contents info)
   2981:(defun org-e-html-underline (underline contents info)
   2991:(defun org-e-html-verbatim (verbatim contents info)
   3001:(defun org-e-html-verse-block (verse-block contents info)
   3028:(defconst org-e-html-filters-alist
   3036:(defun org-e-html-final-function (contents backend info)
   3047:(defun org-e-html-export-to-html
#+end_src

*** Org-element
**** Introduction
Location: http://article.gmane.org/gmane.emacs.orgmode/49416              
Picon
From: Nicolas Goaziou <n.goaziou <at> gmail.com>
Subject: [ANN] Org Elements in contrib
Newsgroups: gmane.emacs.orgmode
Date: 2011-11-21 18:50:29 GMT (28 weeks, 2 days, 4 hours and 6 minutes
ago)

Hello,

I've added org-element.el in contrib directory. It is a complete parser
and interpreter for Org syntax.

While it was written to be extensible, it is also an attempt to
normalize current syntax and provide guidance for its evolution.

Org syntax can be divided into three categories: "Greater elements",
"Elements" and "Objects".

An object can be defined anywhere on a line. It may span over more than
a line but never contains a blank one. Objects belong to the following
types: `emphasis', `entity', `export-snippet', `footnote-reference',
`inline-babel-call', `inline-src-block', `latex-fragment', `line-break',
`link', `macro', `radio-target', `statistics-cookie', `subscript',
`superscript', `target', `time-stamp' and `verbatim'.

An element always starts and ends at the beginning of a line. The only
element's type containing objects is called a `paragraph'. Other types
are: `comment', `comment-block', `example-block', `export-block',
`fixed-width', `horizontal-rule', `keyword', `latex-environment',
`babel-call', `property-drawer', `quote-section', `src-block', `table'
and `verse-block'.

Elements containing paragraphs are called greater elements. Concerned
types are: `center-block', `drawer', `dynamic-block',
`footnote-definition', `headline', `inlinetask', `item', `plain-list',
`quote-block' and `special-block'.

Greater elements (excepted `headline' and `item' types) and elements
(excepted `keyword', `babel-call', and `property-drawer' types) can have
a fixed set of keywords as attributes. Those are called "affiliated
keywords", to distinguish them from others keywords, which are
full-fledged elements. In particular, the "name" affiliated keyword
allows to label almost any element in an Org buffer.

Notwithstanding affiliated keywords, each greater element, element and
object has a fixed set of properties attached to it. Among them, three
are shared by all types: `:begin' and `:end', which refer to the
beginning and ending buffer positions of the considered element or
object, and `:post-blank', which holds the number of blank lines, or
white spaces, at its end.

Some elements also have special properties whose value can hold objects
themselves (i.e. an item tag, an headline name, a table cell). Such
values are called "secondary strings".

Lisp-wise, an element or an object can be represented as a list. It
follows the pattern (TYPE PROPERTIES CONTENTS), where: TYPE is a symbol
describing the Org element or object. PROPERTIES is the property list
attached to it. See docstring of appropriate parsing function to get an
exhaustive list. CONTENTS is a list of elements, objects or raw strings
contained in the current element or object, when applicable.

An Org buffer is a nested list of such elements and objects, whose type
is `org-data' and properties is nil.

The first part of this file implements a parser and an interpreter for
each type of Org syntax.

The next two parts introduce two accessors and a function retrieving the
smallest element containing point (respectively
`org-element-get-property', `org-element-get-contents' and
`org-element-at-point').

The following part creates a fully recursive buffer parser. It also
provides a tool to map a function to elements or objects matching some
criteria in the parse tree. Functions of interest are
`org-element-parse-buffer', `org-element-map' and, to a lesser extent,
`org-element-parse-secondary-string'.

The penultimate part is the cradle of an interpreter for the obtained
parse tree: `org-element-interpret-data' (and its relative,
`org-element-interpret-secondary').

The library ends by furnishing a set of interactive tools for element's
navigation and manipulation.

More specifically, that last part includes some tools like
`org-element-forward', `org-element-backward',
`org-element-drag-forward', `org-element-drag-backward',
`org-element-mark-element', `org-element-up',
`org-element-unindent-buffer'... 

For the impatient (well, not quite as you're still reading this), you
can evaluate the following examples in an Org buffer :

                       (org-element-parse-buffer)
                  (org-element-parse-buffer 'headline)
           (org-element-parse-buffer 'headline 'visible-only)

Also, the following code will parse the buffer, interpret the parsed
tree, and create a canonical copy of it (no indentation, lowercased
blocks, standard keywords):

#+begin_src org
(let ((out (org-element-interpret-data (org-element-parse-buffer))))
  (switch-to-buffer (get-buffer-create "*Bijectivep*"))
  (erase-buffer)
  (insert out)
  (goto-char (point-min))
  (org-mode))
#+end_src

Beside allowing to add keywords like "#+name:", "#+caption:" or
"#+attr_latex:" to almost any Org element, it also introduces two less
noticable changes:

  1. "#+label:" keywords are deprecated in favor of "#+name:". Though,
     for now, "label" is still considered as a synonym of "name".

  2. Protected HTML snippets (like @<b>) are no longer supported, as
     they were too specific.

     Instead, a general mechanism to inline back-end specific commands
     is created. Thus, the HTML back-end will see "<b>some text<\b>"
     while the LaTeX one will only see "some text" if the buffer
     contains:

                     @html{<b>}some text <at> html{<\b>}

     Syntax is heavier, but a configurable variable allows to define
     shortcuts, allowing to reduce it to, for example, @h{<b>}. No
     shortcut is provided by default.

     Also, the syntax is experimental, and may change if proven to be
     inadequate.

I will commit a generic exporter built on top of Elements, along with
a LaTeX back-end, in a couple of days.

Feedback is welcome.

Regards,

-- 
Nicolas Goaziou

**** API
#+begin_src emacs-lisp
165 matches for "(def" in buffer: org-element.el
    152:(defun org-element-center-block-parser ()
    181:(defun org-element-center-block-interpreter (center-block contents)
    189:(defun org-element-drawer-parser ()
    220:(defun org-element-drawer-interpreter (drawer contents)
    230:(defun org-element-dynamic-block-parser ()
    264:(defun org-element-dynamic-block-interpreter (dynamic-block contents)
    276:(defun org-element-footnote-definition-parser ()
    311:(defun org-element-footnote-definition-interpreter (footnote-definition contents)
    321:(defun org-element-headline-parser (&optional raw-secondary-p)
    425:(defun org-element-headline-interpreter (headline contents)
    474:(defun org-element-inlinetask-parser (&optional raw-secondary-p)
    552:(defun org-element-inlinetask-interpreter (inlinetask contents)
    593:(defun org-element-item-parser (struct &optional raw-secondary-p)
    663:(defun org-element-item-interpreter (item contents)
    703:(defun org-element-plain-list-parser (&optional structure)
    742:(defun org-element-plain-list-interpreter (plain-list contents)
    750:(defun org-element-quote-block-parser ()
    778:(defun org-element-quote-block-interpreter (quote-block contents)
    786:(defun org-element-section-parser ()
    812:(defun org-element-section-interpreter (section contents)
    820:(defun org-element-special-block-parser ()
    852:(defun org-element-special-block-interpreter (special-block contents)
    876:(defun org-element-babel-call-parser ()
    896:(defun org-element-babel-call-interpreter (babel-call contents)
    911:(defun org-element-clock-parser ()
    940:(defun org-element-clock-interpreter (clock contents)
    955:(defun org-element-comment-parser ()
    994:(defun org-element-comment-interpreter (comment contents)
   1004:(defun org-element-comment-block-parser ()
   1033:(defun org-element-comment-block-interpreter (comment-block contents)
   1042:(defun org-element-example-block-parser ()
   1099:(defun org-element-example-block-interpreter (example-block contents)
   1111:(defun org-element-export-block-parser ()
   1143:(defun org-element-export-block-interpreter (export-block contents)
   1154:(defun org-element-fixed-width-parser ()
   1190:(defun org-element-fixed-width-interpreter (fixed-width contents)
   1199:(defun org-element-horizontal-rule-parser ()
   1216:(defun org-element-horizontal-rule-interpreter (horizontal-rule contents)
   1224:(defun org-element-keyword-parser ()
   1248:(defun org-element-keyword-interpreter (keyword contents)
   1258:(defun org-element-latex-environment-parser ()
   1284:(defun org-element-latex-environment-interpreter (latex-environment contents)
   1292:(defun org-element-paragraph-parser ()
   1320:(defun org-element-paragraph-interpreter (paragraph contents)
   1328:(defun org-element-planning-parser ()
   1361:(defun org-element-planning-interpreter (planning contents)
   1378:(defun org-element-property-drawer-parser ()
   1414:(defun org-element-property-drawer-interpreter (property-drawer contents)
   1428:(defun org-element-quote-section-parser ()
   1449:(defun org-element-quote-section-interpreter (quote-section contents)
   1457:(defun org-element-src-block-parser ()
   1541:(defun org-element-src-block-interpreter (src-block contents)
   1569:(defun org-element-table-parser ()
   1606:(defun org-element-table-interpreter (table contents)
   1620:(defun org-element-table-row-parser ()
   1648:(defun org-element-table-row-interpreter (table-row contents)
   1657:(defun org-element-verse-block-parser ()
   1687:(defun org-element-verse-block-interpreter (verse-block contents)
   1722:(defun org-element-bold-parser ()
   1746:(defun org-element-bold-interpreter (bold contents)
   1751:(defun org-element-text-markup-successor (limit)
   1776:(defun org-element-code-parser ()
   1797:(defun org-element-code-interpreter (code contents)
   1805:(defun org-element-entity-parser ()
   1836:(defun org-element-entity-interpreter (entity contents)
   1843:(defun org-element-latex-or-entity-successor (limit)
   1880:(defun org-element-export-snippet-parser ()
   1909:(defun org-element-export-snippet-interpreter (export-snippet contents)
   1916:(defun org-element-export-snippet-successor (limit)
   1937:(defun org-element-footnote-reference-parser ()
   1974:(defun org-element-footnote-reference-interpreter (footnote-reference contents)
   1985:(defun org-element-footnote-reference-successor (limit)
   2007:(defun org-element-inline-babel-call-parser ()
   2028:(defun org-element-inline-babel-call-interpreter (inline-babel-call contents)
   2042:(defun org-element-inline-babel-call-successor (limit)
   2060:(defun org-element-inline-src-block-parser ()
   2086:(defun org-element-inline-src-block-interpreter (inline-src-block contents)
   2097:(defun org-element-inline-src-block-successor (limit)
   2110:(defun org-element-italic-parser ()
   2134:(defun org-element-italic-interpreter (italic contents)
   2142:(defun org-element-latex-fragment-parser ()
   2175:(defun org-element-latex-fragment-interpreter (latex-fragment contents)
   2182:(defun org-element-line-break-parser ()
   2193:(defun org-element-line-break-interpreter (line-break contents)
   2198:(defun org-element-line-break-successor (limit)
   2215:(defun org-element-link-parser ()
   2291:(defun org-element-link-interpreter (link contents)
   2301:(defun org-element-link-successor (limit)
   2318:(defun org-element-macro-parser ()
   2353:(defun org-element-macro-interpreter (macro contents)
   2358:(defun org-element-macro-successor (limit)
   2374:(defun org-element-radio-target-parser ()
   2399:(defun org-element-radio-target-interpreter (target contents)
   2404:(defun org-element-radio-target-successor (limit)
   2418:(defun org-element-statistics-cookie-parser ()
   2439:(defun org-element-statistics-cookie-interpreter (statistics-cookie contents)
   2444:(defun org-element-statistics-cookie-successor (limit)
   2458:(defun org-element-strike-through-parser ()
   2482:(defun org-element-strike-through-interpreter (strike-through contents)
   2490:(defun org-element-subscript-parser ()
   2518:(defun org-element-subscript-interpreter (subscript contents)
   2525:(defun org-element-sub/superscript-successor  (limit)
   2540:(defun org-element-superscript-parser ()
   2567:(defun org-element-superscript-interpreter (superscript contents)
   2577:(defun org-element-table-cell-parser ()
   2595:(defun org-element-table-cell-interpreter (table-cell contents)
   2600:(defun org-element-table-cell-successor (limit)
   2612:(defun org-element-target-parser ()
   2632:(defun org-element-target-interpreter (target contents)
   2637:(defun org-element-target-successor (limit)
   2651:(defun org-element-timestamp-parser ()
   2682:(defun org-element-timestamp-interpreter (timestamp contents)
   2687:(defun org-element-timestamp-successor (limit)
   2707:(defun org-element-underline-parser ()
   2731:(defun org-element-underline-interpreter (underline contents)
   2739:(defun org-element-verbatim-parser ()
   2760:(defun org-element-verbatim-interpreter (verbatim contents)
   2775:(defconst org-element-paragraph-separate
   2799:(defconst org-element-all-elements
   2808:(defconst org-element-greater-elements
   2813:(defconst org-element-all-successors
   2820:(defconst org-element-object-successor-alist
   2831:(defconst org-element-all-objects
   2838:(defconst org-element-recursive-objects
   2843:(defconst org-element-block-name-alist
   2859:(defconst org-element-affiliated-keywords
   2865:(defconst org-element-keyword-translation-alist
   2873:(defconst org-element-multiple-keywords
   2883:(defconst org-element-parsed-keywords '("AUTHOR" "CAPTION" "TITLE")
   2892:(defconst org-element-dual-keywords '("CAPTION" "RESULTS")
   2904:(defconst org-element-object-restrictions
   2955:(defconst org-element-secondary-value-alist
   2969:(defun org-element-type (element)
   2981:(defun org-element-property (property element)
   2985:(defun org-element-contents (element)
   2989:(defun org-element-restriction (element)
   3010:(defun org-element-current-element (&optional granularity special structure)
   3153:(defconst org-element--affiliated-re
   3170:(defun org-element-collect-affiliated-keywords
   3261:(defun org-element-parse-buffer (&optional granularity visible-only)
   3290:(defun org-element-parse-secondary-string (string restriction)
   3299:(defun org-element-map (data types fun &optional info first-match no-recursion)
   3404:(defun org-element-parse-elements
   3477:(defun org-element-parse-objects (beg end acc restriction)
   3538:(defun org-element-get-next-object-candidates (limit restriction objects)
   3584:(defun org-element-interpret-data (data &optional parent)
   3650:(defun org-element-interpret--affiliated-keywords (element)
   3697:(defun org-element-normalize-string (s)
   3709:(defun org-element-normalize-contents (element &optional ignore-first)
   3799:(defun org-element-at-point (&optional keep-trail)
   3891:(defsubst org-element-nested-p (elem-A elem-B)
   3900:(defun org-element-swap-A-B (elem-A elem-B)
   3944:(defun org-element-forward ()
   3966:(defun org-element-backward ()
   3989:(defun org-element-up ()
   4006:(defun org-element-down ()
   4020:(defun org-element-drag-backward ()
   4036:(defun org-element-drag-forward ()
   4070:(defun org-element-mark-element ()
   4089:(defun org-narrow-to-element ()
   4107:(defun org-element-transpose ()
   4116:(defun org-element-unindent-buffer ()
   4141:(defun org-element-fill-paragraph (&optional justify)
#+end_src

* Scratch (temporary holding pen for quick notes)
This subtree is a temporary holding place for on-the-fly notes.
Anything of importance should be given a home in the "NOTES" subtree
above.

*** Bug in elnode-dispatcher(..)
Action: 
- open simple.org
- M-x iorg-launch
- open webbrower at http://localhost:8032

=> NOT FOUND

The culprit for not serving the pages is here:

L 563 in elnode.el 
elnode--filter(..)
,--------------------------
| (funcall handler process)
`--------------------------

handler is simple-dispatcher-handler and is a function. Its called
with a process, but in the docs, all handlers get 'httpcon'. Therefore
process=httpcon? 

Errors: 
,------------------------------------------------------
| 20120606174401:
| filter: calling handler on *elnode-webserver-proc*<3>
| <127.0.0.1:33375>
| 
| 20120606174628:
| elnode--sentinel connection broken by for process
| *elnode-webserver-proc*<3> <127.0.0.1:33375>
| 
| 20120606174628:
| Elnode connection dropped *elnode-webserver-proc*<3>
| <127.0.0.1:33375>
`------------------------------------------------------

Backtrace:

,-----------------------------------------------------------------------
| If FUNCTION-404 is non-nil then it is called when no regexp is
| matched." 
| (elnode-normalize-path httpcon (lambda (httpcon) (let
| ((pathinfo (elnode-http-pathinfo httpcon))) (elnode--dispatch-proc
| httpcon pathinfo url-mapping-table function-404))))) 4)
| 
| elnode-dispatcher(#<process *elnode-webserver-proc*<3>
| <127.0.0.1:33392>> (("^$" . iorg-initialize-simple-handler) ("^todo/$"
| . iorg-change-state-handler)) :function-404 t) 
| (progn
| (elnode-log-access "simple" httpcon) (elnode-dispatcher httpcon
| simple-urls :function-404 (elnode-send-404 httpcon)))
| 
| simple-dispatcher-handler(#<process *elnode-webserver-proc*<3>
| <127.0.0.1:33392>>) funcall(simple-dispatcher-handler #<process
| *elnode-webserver-proc*<3> <127.0.0.1:33392>>)
`-----------------------------------------------------------------------

*** How to identify the Org file to act on
Each object and scene must have a unique ID, and these IDs must be
included programmatically into the name of the html form element (e.g.
the button). 

All objects (instances) of one class are found as top-level entries in
one .org file, therefore the object name identifies the .org file (by
the files name, e.g. 

,-------------------------------
| bugpile-<<class-name>>-obj.org
`-------------------------------

With scenes (one scene = one .org-file) this is probably easy too,
since each scene is part of a use-case with its own controller elisp
file and one handler-method for each user action (-> and every user
action is associated with one scene), therefore the handler is
specialised to work on one .org file only and this information is
already included in the handlers name and the html-form's action-url.

*** How to identify the org-element to work on?
Since there are many instances (objects) of one class (e.g. 3456 bugs
as top-level entries in the bugpile-bugs-obj.org file), a handler (or
logic) function needs to know on which one it should act (implemented
by CUSTOM-ID attribute or headline tag?)

With regards to the web-frontend, the org-element is identified by
'id' and/or 'class' information in the html file (or TYPE and/or
ATTRIBUTES in the parse tree). This info must be included
programmatically into the name of the html form element (e.g. the
button) for the handler to know where to act in the underlying .org file.

*** TODO Find elements by ID
Write (alternative) functions that write IDs for each Org element and
find elements by ID.
*** TODO Look for code in Erics mails how to limit line-lenght to 79
*** while-visiting-file from util.el
Question: 
(save-buffer) in body saves file under its name (overwriting the
content)? 
If yes, rewrite iorg-change-state-handler using while-visiting-file. 
*** Further todos
Actually its ugly to put buttons behind many org elements to enable
interaction from the webinterface. I see two reasonable ways to edit a
page: 
1. Put one edit button/link on the page that trigger that the page is
   newly loaded, this time each editable org-element wrapped into a
   html-form&input-elem due to postprocessing. Adecuate forms are
   textfields for headline text, textareas for outline text,
   html-choice for todo-states (and evtl. for tags, if the allowed tag
   values are predefinedm html-checkboxes for selection lists. 
2. Put a little edit symbol behind each editable element (maybe a
   pen). pressing the symbol trigger a Ajax JS call, that wraps the
   html element (and only this one) into a html form and sends the
   replacing html without reloading the page. 
*** How to deal with one html-form with many input/select Elements?
A typical html formular has many input/select fields, but only one
submit and/or rest button. Thus, the single action url points to one
single handler function that then must take care of all fields. This
would be the typical design for the 'edit bug' use case - with no
JavaScript. It would be very unusual to have a button for each field
in such a case. 

With JS, each input/select field could probably send a
request 'onchange' and would be updated immediately (PicoLisp as an
example here). 

*** Working on the parse tree?                                         :iorg:
    :PROPERTIES:
    :html-form:     http://localhost:8000/working-on-parse-tree
    :html-send: POST
    :html-send_ALL: POST GET   # should be http-send, but that will only confuse
    :html-radio_ALL: plain-list-dash plain-list-asteriks plain-list-plus plain-list-num-point plain-list-num-parenth
    :html-checkbox_ALL: checkbox
    :html-area_ALL: text source example quote verse center latex html ascii 
    :html-text_ALL: headline tags_FREE properties_FREE
    :html-button_ALL: button submit reset
    :html-button-pos_ALL: top-left top-right bottom-left bottom-right
    :html-select_ALL: todo tags_ALIST properties_ALL
    :html-checkbox: checkbox
    :html-text:     headline tags_FREE 
    :html-area:     text
    :html-button: submit reset
    :html-button-pos: bottom-right
    :html-button-value: Send edits
    :END:

I still don't have a clear idea of how this could work [UPDATE: after
having written this entry, I now have a quite clear idea, I think the
approach used here looks quite promising]. Maybe something like the
use of org properties and tags as examplified in this entry?

But:
1. org-properties and only work for outline headlines, so they must
   declare what to do for the whole subtree
2. iorg should not force a different use of org-mode elements, but
   rather adapt to the common and natural use.

Therefore, check all items you agree with: 
 - [ ] Combine Org properties and tags for declarative iOrg programming
 - [ ] Tag headlines with :iorg: for the iorg exporter (ignored
   without tag)
 - [ ] do not use attribute inheritance as default (the containment
   relation between entries gives all the necessary info)

The order of properties is relevant, e.g. html-label belongs to the closest
html-field property on top of it. Some html attritutes like 'name' or
'ID' can be set automatically, but for others we would need additional
user properties like:

:html-area-rows: 
:html-area-cols:
:html-button-value:
etc. 

A bugpage would be delivered as a static webpage (SCENE 1) with only one button
'Edit' first (if the user is in a group that has
bug-edit-permissions). After pressing the button, the associated
handler-functions either exports another Org file with all the
necessary :html-attributes: and tags or adds these org-elements to the
existing Org view file (SCENE 2). The user is then presented a html
formular with all specified elements wrapped into input/select fields and
submit/reset buttons. The system stores the edited info and delivers
the edited page again (SCENE 1). 

It seems easier to work on one file with always up-to-date content and
programmatically change the properties and tags for different scenes.

**** use Org syntax to tag Org elements                                
     :PROPERTIES:
     :html-radio:   plain-list-dash
     :html-label:    Org Syntax?
     :END:
probably properties, since we need values for action and other
properties (names can be automatically produced)
 - either only properties
 - or combining properties and tags

**** add functionality to the e-html export backend                    
     :PROPERTIES:
     :html-radio:   plain-list-num-parenth
     :html-label:    New Functionality?
     :END:
add new semantic export rules to the e-html backend that not only look
at the org-element type, but also at the content of the associated
org-properties. 

 1) give choices: let the user define for each entry, what org-element
    will be exported to which html-field 
 2) be strict: decide beforehand about the org-element/html-field
    association

I would say: both. Different types of plain-lists could be wrapped
into a set of radio buttons (only one selection allowed), so give the
user the choice. On the other hand, I would only allow Org checkboxes
as html checkboxes since everything else would cause confusion. 

PS:
 - this list will not be processed by iOrg
 - while the list above will be converted into two connected
   html-radio-buttons. 

**** attribute inheritance
     :PROPERTIES:
     :html-area: text
     :END:
one :iorg: tag for a top-level entry means all sub-level entries are
processed by iOrg too. the next entry will be ignored due to
the :noiorg: tag.

**** this entry will not be processed by iOrg                        :noiorg:
     :PROPERTIES:
     :CUSTOM_ID: only-static-export
     :END: 
What about conflicts between :html-xyz: properties and the :noiorg: tag?
I'd give priority to the :noiorg: tag.

*** Question: multivalued properties
There is a non-interactive API function to set multivalued properties,
shouldn't this function be interactive? 

Are multivalued properties
supposed to look like this:

:prop: val1 val2
(once I have set _ALL for a property, I can't enter more than one
value anymore in the minibuffer)

or like this:

:prop: val1
:prop+: val2
?
*** Question: item tags
As far as I understand org-element.el, items are list items - but what
is an item tag?

,-----------------------------------------------------------------
| Some elements also have special properties whose value can hold
| objects themselves (i.e. an item tag or an headline name).  Such
`-----------------------------------------------------------------

Tags are only possible on headlines - right?

*** org-element findings
Most of the information needed by iOrg is included in the 'headline'
element. The function

,---------------------------------------------------------------------
| (defun org-element-parse-buffer (&optional granularity visible-only)
|   "Recursively parse the buffer and return structure.
| If narrowing is in effect, only parse the visible part of the
| buffer.
| 
| Optional argument GRANULARITY determines the depth of the
| recursion.  It can be set to the following symbols:
| 
| `headline'          Only parse headlines.
| `greater-element'   Don't recurse into greater elements excepted
|                     headlines and sections.  Thus, elements
|                     parsed are the top-level ones.
| `element'           Parse everything but objects and plain text.
| `object'            Parse the complete buffer (default).
| 
| When VISIBLE-ONLY is non-nil, don't parse contents of hidden
| elements.
| 
| Assume buffer is in Org mode."
`---------------------------------------------------------------------

will be very usefull to get this info, especially with GRANULARITY
headline. 

The function

,--------------------------------------------------------------------------------
| (defun org-element-map (data types fun &optional info first-match no-recursion)
|   "Map a function on selected elements or objects.
| 
| DATA is the parsed tree, as returned by, i.e,
| `org-element-parse-buffer'.  TYPES is a symbol or list of symbols
| of elements or objects types.  FUN is the function called on the
| matching element or object.  It must accept one arguments: the
| element or object itself.
| 
| When optional argument INFO is non-nil, it should be a plist
| holding export options.  In that case, parts of the parse tree
| not exportable according to that property list will be skipped.
| 
| When optional argument FIRST-MATCH is non-nil, stop at the first
| match for which FUN doesn't return nil, and return that value.
| 
| Optional argument NO-RECURSION is a symbol or a list of symbols
| representing elements or objects types.  `org-element-map' won't
| enter any recursive element or object whose type belongs to that
| list.  Though, FUN can still be applied on them.
| 
| Nil values returned from FUN do not appear in the results."
`--------------------------------------------------------------------------------
   
Will be usefull to act on the parsed headline information. 

*** Looking at the parse-tree
**** (org-element-parse-buffer)

Applied to the simple.org buffer: 

#+begin_src emacs-lisp
;;(message "%s" simple-org-parsed) (pp-buffer)
(org-data nil
(section
(:begin 1 :end 42 :contents-begin 1 :contents-end 41 :post-blank 1)
(keyword
(:key TITLE :value A simple example Org-mode file :begin 1 :end 41 :post-blank 0)))
(headline
(:raw-value This file has a top level heading :title
(This file has a top level heading)
:begin 42 :end 2038 :pre-blank 0 :hiddenp nil :contents-begin 120 :contents-end 2038 :level 1 :priority nil :tags
(bar)
:todo-keyword TODO :todo-type todo :scheduled nil :deadline nil :timestamp nil :clock nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :quotedp nil :iorg-property foo :category simple)
(section
(:begin 120 :end 2038 :contents-begin 120 :contents-end 2038 :post-blank 0)
(property-drawer
(:begin 120 :end 166 :hiddenp nil :properties
((iorg-property . foo))
:post-blank 1))
(paragraph
(:begin 166 :end 261 :contents-begin 166 :contents-end 260 :post-blank 0)
This heading has five components.  Lets see if we can edit all five
through the web interface.)
(plain-list
(:type ordered :begin 261 :end 591 :contents-begin 261 :contents-end 590 :structure
((261 0 1.  nil nil nil 327)
(327 0 2.  nil nil nil 397)
(397 0 3.  nil nil nil 441)
(441 0 4.  nil nil nil 521)
(521 0 5.  nil nil nil 590))
:post-blank 1)
(item
(:bullet 1.  :begin 261 :end 327 :contents-begin 264 :contents-end 327 :checkbox nil :counter nil :tag nil :hiddenp nil :structure
((261 0 1.  nil nil nil 327)
(327 0 2.  nil nil nil 397)
(397 0 3.  nil nil nil 441)
(441 0 4.  nil nil nil 521)
(521 0 5.  nil nil nil 590))
:post-blank 0)
(paragraph
(:begin 264 :end 327 :contents-begin 264 :contents-end 326 :post-blank 0)
task state, currently this is
(verbatim
(:value TODO :begin 294 :end 301 :post-blank 1))
lets change it to
(verbatim
(:value DONE :begin 319 :end 325 :post-blank 0))
.))
(item
(:bullet 2.  :begin 327 :end 397 :contents-begin 330 :contents-end 397 :checkbox nil :counter nil :tag nil :hiddenp nil :structure
((261 0 1.  nil nil nil 327)
(327 0 2.  nil nil nil 397)
(397 0 3.  nil nil nil 441)
(441 0 4.  nil nil nil 521)
(521 0 5.  nil nil nil 590))
:post-blank 0)
(paragraph
(:begin 330 :end 397 :contents-begin 330 :contents-end 396 :post-blank 0)
a property, try to change the
(verbatim
(:value iorg-property :begin 360 :end 376 :post-blank 1))
from
(verbatim
(:value foo :begin 381 :end 387 :post-blank 1))
to
(verbatim
(:value bar :begin 390 :end 395 :post-blank 0))
.))
(item
(:bullet 3.  :begin 397 :end 441 :contents-begin 400 :contents-end 441 :checkbox nil :counter nil :tag nil :hiddenp nil :structure
((261 0 1.  nil nil nil 327)
(327 0 2.  nil nil nil 397)
(397 0 3.  nil nil nil 441)
(441 0 4.  nil nil nil 521)
(521 0 5.  nil nil nil 590))
:post-blank 0)
(paragraph
(:begin 400 :end 441 :contents-begin 400 :contents-end 440 :post-blank 0)
tag, change the tag from
(verbatim
(:value bar :begin 425 :end 431 :post-blank 1))
to
(verbatim
(:value foo :begin 434 :end 439 :post-blank 0))
.))
(item
(:bullet 4.  :begin 441 :end 521 :contents-begin 444 :contents-end 521 :checkbox nil :counter nil :tag nil :hiddenp nil :structure
((261 0 1.  nil nil nil 327)
(327 0 2.  nil nil nil 397)
(397 0 3.  nil nil nil 441)
(441 0 4.  nil nil nil 521)
(521 0 5.  nil nil nil 590))
:post-blank 0)
(paragraph
(:begin 444 :end 521 :contents-begin 444 :contents-end 520 :post-blank 0)
heading text, allow the heading text to be edited through the web interface.))
(item
(:bullet 5.  :begin 521 :end 590 :contents-begin 524 :contents-end 590 :checkbox nil :counter nil :tag nil :hiddenp nil :structure
((261 0 1.  nil nil nil 327)
(327 0 2.  nil nil nil 397)
(397 0 3.  nil nil nil 441)
(441 0 4.  nil nil nil 521)
(521 0 5.  nil nil nil 590))
:post-blank 0)
(paragraph
(:begin 524 :end 590 :contents-begin 524 :contents-end 589 :post-blank 0)
body text, allow this text to be edited through the web interface)))
(paragraph
(:begin 591 :end 998 :contents-begin 591 :contents-end 997 :post-blank 0)
The five items listed about should be in rough order of difficulty.
So lets work through them in order.  The simplest should be changing
the task state.  We can start with a simple button on the final html
page next to the headline, the text of this button can be \"finish\",
and pressing it will change the TODO state in this Org-mode file on
the server to DONE.  The implementation should look like this...)
(plain-list
(:type unordered :begin 998 :end 1469 :contents-begin 998 :contents-end 1468 :structure
((998 0 -  nil nil nil 1179)
(1179 0 -  nil nil nil 1369)
(1369 0 -  nil nil nil 1468))
:post-blank 1)
(item
(:bullet -  :begin 998 :end 1179 :contents-begin 1000 :contents-end 1179 :checkbox nil :counter nil :tag nil :hiddenp nil :structure
((998 0 -  nil nil nil 1179)
(1179 0 -  nil nil nil 1369)
(1369 0 -  nil nil nil 1468))
:post-blank 0)
(paragraph
(:begin 1000 :end 1179 :contents-begin 1000 :contents-end 1178 :post-blank 0)
add a function to the `org-export-html-final-hook' which will scan
  through the resulting HTML and will add the html/JS necessary to
  include this button on the final web page.))
(item
(:bullet -  :begin 1179 :end 1369 :contents-begin 1181 :contents-end 1369 :checkbox nil :counter nil :tag nil :hiddenp nil :structure
((998 0 -  nil nil nil 1179)
(1179 0 -  nil nil nil 1369)
(1369 0 -  nil nil nil 1468))
:post-blank 0)
(paragraph
(:begin 1181 :end 1369 :contents-begin 1181 :contents-end 1368 :post-blank 0)
start an elnode server and add two different handlers, one will
  serve up this web page
(with the above hook)
, and the second will
  handle the form data returned by the \"finish\" button.))
(item
(:bullet -  :begin 1369 :end 1468 :contents-begin 1371 :contents-end 1468 :checkbox nil :counter nil :tag nil :hiddenp nil :structure
((998 0 -  nil nil nil 1179)
(1179 0 -  nil nil nil 1369)
(1369 0 -  nil nil nil 1468))
:post-blank 0)
(paragraph
(:begin 1371 :end 1468 :contents-begin 1371 :contents-end 1467 :post-blank 0)
the second handler will use the `org-todo' function to change the
  actual state of the heading.)))
(paragraph
(:begin 1469 :end 1708 :contents-begin 1469 :contents-end 1706 :post-blank 1)
Once this is working we should have a much better idea of what is
required to make this process work end-to-end.  With luck we may have
some initial functionality by the end of next week
(some number of the
above 5 parts being editable)
.)
(paragraph
(:begin 1708 :end 1948 :contents-begin 1708 :contents-end 1946 :post-blank 1)
Lets keep all of the code implementing this in
(link
(:type file :path simple.el :raw-link file:simple.el :begin 1755 :end 1769 :contents-begin nil :contents-end nil :post-blank 0))
, once it
is written we can see what it look like and decide how to better
organize it into a directory structure which we'll want to keep for
the remainder of the iorg project.)
(paragraph
(:begin 1948 :end 2038 :contents-begin 1948 :contents-end 2037 :post-blank 0)
I've stubbed out a few functions in
(link
(:type file :path simple.el :raw-link file:simple.el :begin 1984 :end 1998 :contents-begin nil :contents-end nil :post-blank 0))
, add new functions
as they are needed.))))
#+end_src

Except for the headline section and with a keyword, all other elements
in the simple.org buffer are subelements of the greater element
headline, i.e. there are several paragraphs as subelements which
themselves contain other elements like sections, list items, verbatim
blocks, and links. 

#+begin_src emacs-lisp
34 matches for "([^:][a-z]+$" in buffer: tmp (parse-tree of simple.org)
      3:(section
      5:(keyword
      7:(headline
     13:(section
     19:(paragraph
     31:(item
     39:(paragraph
     42:(verbatim
     45:(verbatim
     48:(item
     56:(paragraph
     59:(verbatim
     62:(verbatim
     65:(verbatim
     68:(item
     76:(paragraph
     79:(verbatim
     82:(verbatim
     85:(item
     93:(paragraph
     96:(item
    104:(paragraph
    107:(paragraph
    121:(item
    127:(paragraph
    132:(item
    138:(paragraph
    145:(item
    151:(paragraph
    155:(paragraph
    163:(paragraph
    166:(link
    172:(paragraph
    175:(link
#+end_src

**** (org-element-parse-buffer 'headlines)

Applied to the NOTES buffer, here is, as an example, the result for
headline "Working on the parse tree":

#+begin_src emacs-lisp
  (headline
  (
  :raw-value Working on the parse tree?
  :title Working on the parse tree? 
  :begin 59510 
  :end 64038 
  :pre-blank 0 
  :hiddenp outline
  :contents-begin 59588 
  :contents-end 64037 
  :level 3 
  :priority nil 
  :tags (iorg)
  :todo-keyword nil 
  :todo-type nil 
  :scheduled nil 
  :deadline nil
  :timestamp nil 
  :clock nil 
  :post-blank 1 
  :footnote-section-p nil
  :archivedp nil 
  :commentedp nil 
  :quotedp nil 
  :html-form http://localhost:8000/working-on-parse-tree 
  :html-send POST
  # should be http-send, but that will only confuse 
  :html-send-all POST GET 
  :html-radio-all plain-list-dash plain-list-asteriks
  plain-list-plus plain-list-num-point plain-list-num-parenth
  :html-checkbox-all checkbox 
  :html-area-all text source example quote
  verse center latex html ascii 
  :html-text-all headline tags_FREE properties_FREE 
  :html-button-all button submit reset
  :html-button-pos-all top-left top-right bottom-left bottom-right
  :html-select-all todo tags_ALIST properties_ALL 
  :html-checkbox checkbox
  :html-text headline tags_FREE 
  :html-area text 
  :html-button submit reset
  :html-button-pos bottom-right 
  :html-button-value Send edits 
  :category bugpile
  ))
#+end_src

The elements of an Org buffer (from org-element.el):

#+begin_src emacs-lisp
  (defconst org-element-all-elements
    '(center-block clock comment comment-block drawer dynamic-block example-block
                   export-block fixed-width footnote-definition headline
                   horizontal-rule inlinetask item keyword latex-environment
                   babel-call paragraph plain-list planning property-drawer
                   quote-block quote-section section special-block src-block table
                   table-row verse-block)
    "Complete list of element types.")
  
  (defconst org-element-greater-elements
    '(center-block drawer dynamic-block footnote-definition headline inlinetask
                   item plain-list quote-block section special-block table)
    "List of recursive element types aka Greater Elements.")
  
  (defconst org-element-all-successors
    '(export-snippet footnote-reference inline-babel-call inline-src-block
                     latex-or-entity line-break link macro radio-target
                     statistics-cookie sub/superscript table-cell target
                     text-markup timestamp)
    "Complete list of successors.")
#+end_src
**** communication channel for element headline (simple.org)
*Important finding:*
Almost all information that should be wrapped into
html form fields is better taken from the communication channel than
from the html-output. First, access is easier, second, in most cases
strings should be offered as editable text in html text-fields or
textareas in Org syntax (!) - not in html syntax.

Therefore, post-processing becomes much easier: simply mark and delete
the exported static html and replace it with something like this:

#+begin_src emacs-lisp
(concat
 "<input type=text ...>"
 ;TODO how to work with keyword args?
  (comm-chan (headline :raw-value)) 
 "</input>"
#+end_src

Does work -- note: the com-chan itself is a plist.
#+begin_src emacs-lisp
  (plist-get com-chan :author) ;; => "Thorsten Jolitz"

;;This is the comm-chan for element headline (simple.org):
;; (message "%s" comm-chan)

(:author Thorsten Jolitz :creator Generated by Org mode 7.8.09 in Emacs 24.0.93.1. :date nil :description nil :email tjolitz@googlemail.com :exclude-tags
(noexport)
:headline-levels 3 :keywords nil :language en :preserve-breaks nil :section-numbers t :select-tags
(export)
:time-stamp-file t :title
(A simple example Org-mode file)
:with-archived-trees headline :with-author t :with-clocks nil :with-creator comment :with-drawers nil :with-email nil :with-emphasize t :with-entities t :with-fixed-width t :with-footnotes t :with-plannings nil :with-priority nil :with-special-strings t :with-sub-superscript nil :with-toc t :with-tables t :with-tags not-in-toc :with-tasks t :with-timestamps nil :with-todo-keywords t :agenda-style  :convert-org-links t :inline-images maybe :style  :style-extra  :style-include-default t :style-include-scripts t :html-extension html :html-postamble auto :html-preamble t :html-table-tag <table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"> :xml-declaration
((html . <?xml version="1.0" encoding="%s"?>)
(php . <?php echo "<?xml version=\"1.0\" encoding=\"%s\" ?>" ?>))
:LaTeX-fragments t :mathjax  :input-file /home/tj/git/bugpile/simple/simple.org :macro-modification-time
(eval
(format-time-string "$1"
'(20437 64977)))
:macro-input-file simple.org :macro-date
(eval
(format-time-string "$1"))
:macro-time
(eval
(format-time-string "$1"))
:macro-property
(eval
(org-entry-get nil "$1" 'selective))
:back-end e-html :footnote-definition-alist nil :filter-bold nil :filter-babel-call nil :filter-center-block nil :filter-clock nil :filter-code nil :filter-comment nil :filter-comment-block nil :filter-drawer nil :filter-dynamic-block nil :filter-entity nil :filter-example-block nil :filter-export-block nil :filter-export-snippet nil :filter-final-output
(org-e-html-final-function)
:filter-fixed-width nil :filter-footnote-definition nil :filter-footnote-reference nil :filter-headline
(iorg-html-wrap-headline-content-in-textarea)
:filter-horizontal-rule nil :filter-inline-babel-call nil :filter-inline-src-block nil :filter-inlinetask nil :filter-italic nil :filter-item nil :filter-keyword nil :filter-latex-environment nil :filter-latex-fragment nil :filter-line-break nil :filter-link nil :filter-macro nil :filter-paragraph nil :filter-parse-tree nil :filter-plain-list nil :filter-plain-text nil :filter-planning nil :filter-property-drawer nil :filter-quote-block nil :filter-quote-section nil :filter-radio-target nil :filter-section nil :filter-special-block nil :filter-src-block nil :filter-statistics-cookie nil :filter-strike-through nil :filter-subscript nil :filter-superscript nil :filter-table nil :filter-table-cell nil :filter-table-row nil :filter-target nil :filter-timestamp nil :filter-underline nil :filter-verbatim nil :filter-verse-block nil :parse-tree
(org-data nil
(section
(:begin 1 :end 42 :contents-begin 1 :contents-end 41 :post-blank 1)
(keyword
(:key TITLE :value A simple example Org-mode file :begin 1 :end 41 :post-blank 0)))
(headline
(:raw-value This file has a top level heading                                :bar: # # :title
(This file has a top level heading                                :bar:)
:begin 42 :end 2042 :pre-blank 0 :hiddenp outline :contents-begin 124 :contents-end 2042 :level 1 :priority nil :tags nil :todo-keyword TODO :todo-type todo :scheduled nil :deadline nil :timestamp nil :clock nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :quotedp nil :iorg-property foo :category simple)
(section
(:begin 124 :end 2042 :contents-begin 124 :contents-end 2042 :post-blank 0)
(property-drawer
(:begin 124 :end 170 :hiddenp outline :properties
((iorg-property . foo))
:post-blank 1))
(paragraph
(:begin 170 :end 265 :contents-begin 170 :contents-end 264 :post-blank 0)
This heading has five components.  Lets see if we can edit all five
through the web interface.)
(plain-list
(:type ordered :begin 265 :end 595 :contents-begin 265 :contents-end 594 :structure
((265 0 1.  nil nil nil 331)
(331 0 2.  nil nil nil 401)
(401 0 3.  nil nil nil 445)
(445 0 4.  nil nil nil 525)
(525 0 5.  nil nil nil 594))
:post-blank 1)
(item
(:bullet 1.  :begin 265 :end 331 :contents-begin 268 :contents-end 331 :checkbox nil :counter nil :tag nil :hiddenp nil :structure
((265 0 1.  nil nil nil 331)
(331 0 2.  nil nil nil 401)
(401 0 3.  nil nil nil 445)
(445 0 4.  nil nil nil 525)
(525 0 5.  nil nil nil 594))
:post-blank 0)
(paragraph
(:begin 268 :end 331 :contents-begin 268 :contents-end 330 :post-blank 0)
task state, currently this is
(verbatim
(:value TODO :begin 298 :end 305 :post-blank 1))
lets change it to
(verbatim
(:value DONE :begin 323 :end 329 :post-blank 0))
.))
(item
(:bullet 2.  :begin 331 :end 401 :contents-begin 334 :contents-end 401 :checkbox nil :counter nil :tag nil :hiddenp nil :structure
((265 0 1.  nil nil nil 331)
(331 0 2.  nil nil nil 401)
(401 0 3.  nil nil nil 445)
(445 0 4.  nil nil nil 525)
(525 0 5.  nil nil nil 594))
:post-blank 0)
(paragraph
(:begin 334 :end 401 :contents-begin 334 :contents-end 400 :post-blank 0)
a property, try to change the
(verbatim
(:value iorg-property :begin 364 :end 380 :post-blank 1))
from
(verbatim
(:value foo :begin 385 :end 391 :post-blank 1))
to
(verbatim
(:value bar :begin 394 :end 399 :post-blank 0))
.))
(item
(:bullet 3.  :begin 401 :end 445 :contents-begin 404 :contents-end 445 :checkbox nil :counter nil :tag nil :hiddenp nil :structure
((265 0 1.  nil nil nil 331)
(331 0 2.  nil nil nil 401)
(401 0 3.  nil nil nil 445)
(445 0 4.  nil nil nil 525)
(525 0 5.  nil nil nil 594))
:post-blank 0)
(paragraph
(:begin 404 :end 445 :contents-begin 404 :contents-end 444 :post-blank 0)
tag, change the tag from
(verbatim
(:value bar :begin 429 :end 435 :post-blank 1))
to
(verbatim
(:value foo :begin 438 :end 443 :post-blank 0))
.))
(item
(:bullet 4.  :begin 445 :end 525 :contents-begin 448 :contents-end 525 :checkbox nil :counter nil :tag nil :hiddenp nil :structure
((265 0 1.  nil nil nil 331)
(331 0 2.  nil nil nil 401)
(401 0 3.  nil nil nil 445)
(445 0 4.  nil nil nil 525)
(525 0 5.  nil nil nil 594))
:post-blank 0)
(paragraph
(:begin 448 :end 525 :contents-begin 448 :contents-end 524 :post-blank 0)
heading text, allow the heading text to be edited through the web interface.))
(item
(:bullet 5.  :begin 525 :end 594 :contents-begin 528 :contents-end 594 :checkbox nil :counter nil :tag nil :hiddenp nil :structure
((265 0 1.  nil nil nil 331)
(331 0 2.  nil nil nil 401)
(401 0 3.  nil nil nil 445)
(445 0 4.  nil nil nil 525)
(525 0 5.  nil nil nil 594))
:post-blank 0)
(paragraph
(:begin 528 :end 594 :contents-begin 528 :contents-end 593 :post-blank 0)
body text, allow this text to be edited through the web interface)))
(paragraph
(:begin 595 :end 1002 :contents-begin 595 :contents-end 1001 :post-blank 0)
The five items listed about should be in rough order of difficulty.
So lets work through them in order.  The simplest should be changing
the task state.  We can start with a simple button on the final html
page next to the headline, the text of this button can be "finish",
and pressing it will change the TODO state in this Org-mode file on
the server to DONE.  The implementation should look like this...)
(plain-list
(:type unordered :begin 1002 :end 1473 :contents-begin 1002 :contents-end 1472 :structure
((1002 0 -  nil nil nil 1183)
(1183 0 -  nil nil nil 1373)
(1373 0 -  nil nil nil 1472))
:post-blank 1)
(item
(:bullet -  :begin 1002 :end 1183 :contents-begin 1004 :contents-end 1183 :checkbox nil :counter nil :tag nil :hiddenp outline :structure
((1002 0 -  nil nil nil 1183)
(1183 0 -  nil nil nil 1373)
(1373 0 -  nil nil nil 1472))
:post-blank 0)
(paragraph
(:begin 1004 :end 1183 :contents-begin 1004 :contents-end 1182 :post-blank 0)
add a function to the `org-export-html-final-hook' which will scan
  through the resulting HTML and will add the html/JS necessary to
  include this button on the final web page.))
(item
(:bullet -  :begin 1183 :end 1373 :contents-begin 1185 :contents-end 1373 :checkbox nil :counter nil :tag nil :hiddenp outline :structure
((1002 0 -  nil nil nil 1183)
(1183 0 -  nil nil nil 1373)
(1373 0 -  nil nil nil 1472))
:post-blank 0)
(paragraph
(:begin 1185 :end 1373 :contents-begin 1185 :contents-end 1372 :post-blank 0)
start an elnode server and add two different handlers, one will
  serve up this web page
(with the above hook)
, and the second will
  handle the form data returned by the "finish" button.))
(item
(:bullet -  :begin 1373 :end 1472 :contents-begin 1375 :contents-end 1472 :checkbox nil :counter nil :tag nil :hiddenp outline :structure
((1002 0 -  nil nil nil 1183)
(1183 0 -  nil nil nil 1373)
(1373 0 -  nil nil nil 1472))
:post-blank 0)
(paragraph
(:begin 1375 :end 1472 :contents-begin 1375 :contents-end 1471 :post-blank 0)
the second handler will use the `org-todo' function to change the
  actual state of the heading.)))
(paragraph
(:begin 1473 :end 1712 :contents-begin 1473 :contents-end 1710 :post-blank 1)
Once this is working we should have a much better idea of what is
required to make this process work end-to-end.  With luck we may have
some initial functionality by the end of next week
(some number of the
above 5 parts being editable)
.)
(paragraph
(:begin 1712 :end 1952 :contents-begin 1712 :contents-end 1950 :post-blank 1)
Lets keep all of the code implementing this in
(link
(:type file :path simple.el :raw-link file:simple.el :begin 1759 :end 1773 :contents-begin nil :contents-end nil :post-blank 0))
, once it
is written we can see what it look like and decide how to better
organize it into a directory structure which we'll want to keep for
the remainder of the iorg project.)
(paragraph
(:begin 1952 :end 2042 :contents-begin 1952 :contents-end 2041 :post-blank 0)
I've stubbed out a few functions in
(link
(:type file :path simple.el :raw-link file:simple.el :begin 1988 :end 2002 :contents-begin nil :contents-end nil :post-blank 0))
, add new functions
as they are needed.))))
#+end_src

**** how to work with org-elements from the INFO argument

Here is and informative example from Org-e-html
#+begin_src emacs-lisp
(defun org-e-html-table-first-row-data-cells (table info)
  (let ((table-row
	 (org-element-map
	  table 'table-row
	  (lambda (row)
	    (unless (eq (org-element-property :type row) 'rule) row))
	  info 'first-match))
	(special-column-p (org-export-table-has-special-column-p table)))
    (if (not special-column-p) (org-element-contents table-row)
      (cdr (org-element-contents table-row)))))
#+end_src

**** Post-processed info/parse-tree of simple.org

#+begin_src emacs-lisp
(
:author "Thorsten Jolitz" 
:creator "Generated by Org mode 7.8.09 in Emacs 24.0.93.1." 
:date nil 
:description nil 
:email "tjolitz@googlemail.com" 
:exclude-tags ("noexport") 
:headline-levels 3 
:keywords nil 
:language "en" 
:preserve-breaks nil 
:section-numbers t 
:select-tags ("export") 
:time-stamp-file t 
:title ("A simple example Org-mode file") 
:with-archived-trees headline 
:with-author t 
:with-clocks nil 
:with-creator comment 
:with-drawers nil 
:with-email nil 
:with-emphasize t 
:with-entities t 
:with-fixed-width t 
:with-footnotes t 
:with-plannings nil 
:with-priority nil 
:with-special-strings t 
:with-sub-superscript nil 
:with-toc t 
:with-tables t 
:with-tags not-in-toc 
:with-tasks t 
:with-timestamps nil 
:with-todo-keywords t 
:agenda-style "" 
:convert-org-links t 
:inline-images maybe 
:link-home "" 
:link-up "" 
:style "" 
:style-extra "" 
:style-include-default t 
:style-include-scripts t 
:html-extension "html" 
:html-postamble auto 
:html-preamble t 
:html-table-tag "<table border=\"2\" cellspacing=\"0\" cellpadding=\"6\" rules=\"groups\" frame=\"hsides\">" 
:xml-declaration (("html" . "<?xml version=\"1.0\" encoding=\"%s\"?>") ("php" . "<?php echo \"<?xml version=\\\"1.0\\\" encoding=\\\"%s\\\" ?>\"; ?>")) 
:LaTeX-fragments t 
:mathjax "" 
:input-file "/home/tj/git/bugpile/simple/simple.org" 
:footnote-definition-alist nil 
:id-alist nil 
:macro-modification-time "(eval (format-time-string \"$1\" '(20443 7671)))" 
:macro-input-file "simple.org" 
:macro-date "(eval (format-time-string \"$1\"))" 
:macro-time "(eval (format-time-string \"$1\"))" 
:macro-property "(eval (org-entry-get nil \"$1\" 'selective))" 
:back-end iorg 
:translate-alist 
(
(headline . org-iorg-b-headline) 
(item . org-iorg-b-item) 
(paragraph . org-iorg-b-paragraph) 
(plain-list . org-iorg-b-plain-list) 
(section . org-iorg-b-section) 
(babel-call . org-e-html-babel-call) 
(bold . org-e-html-bold) 
(center-block . org-e-html-center-block) 
(clock . org-e-html-clock) 
(code . org-e-html-code) 
(comment . org-e-html-comment) 
(comment-block . org-e-html-comment-block) 
(drawer . org-e-html-drawer) 
(dynamic-block . org-e-html-dynamic-block) 
(entity . org-e-html-entity) 
(example-block . org-e-html-example-block) 
(export-block . org-e-html-export-block) 
(export-snippet . org-e-html-export-snippet) 
(fixed-width . org-e-html-fixed-width) 
(footnote-definition . org-e-html-footnote-definition) 
(footnote-reference . org-e-html-footnote-reference) 
(headline . org-e-html-headline) 
(horizontal-rule . org-e-html-horizontal-rule) 
(inline-babel-call . org-e-html-inline-babel-call) 
(inline-src-block . org-e-html-inline-src-block) 
(inlinetask . org-e-html-inlinetask) 
(italic . org-e-html-italic) 
(item . org-e-html-item) 
(keyword . org-e-html-keyword) 
(latex-environment . org-e-html-latex-environment) 
(latex-fragment . org-e-html-latex-fragment) 
(line-break . org-e-html-line-break) 
(link . org-e-html-link) 
(macro . org-e-html-macro) 
(paragraph . org-e-html-paragraph) 
(plain-list . org-e-html-plain-list) 
(plain-text . org-e-html-plain-text) 
(planning . org-e-html-planning) 
(property-drawer . org-e-html-property-drawer) 
(quote-block . org-e-html-quote-block) 
(quote-section . org-e-html-quote-section) 
(radio-target . org-e-html-radio-target) 
(section . org-e-html-section) 
(special-block . org-e-html-special-block) 
(src-block . org-e-html-src-block) 
(statistics-cookie . org-e-html-statistics-cookie) 
(strike-through . org-e-html-strike-through) 
(subscript . org-e-html-subscript) 
(superscript . org-e-html-superscript) 
(table . org-e-html-table) 
(table-cell . org-e-html-table-cell) 
(table-row . org-e-html-table-row) 
(target . org-e-html-target) 
(template . org-e-html-template) 
(timestamp . org-e-html-timestamp) 
(underline . org-e-html-underline) 
(verbatim . org-e-html-verbatim) 
(verse-block . org-e-html-verse-block)) 
:filter-bold nil 
:filter-babel-call nil 
:filter-center-block nil 
:filter-clock nil 
:filter-code nil 
:filter-comment nil 
:filter-comment-block nil 
:filter-drawer nil 
:filter-dynamic-block nil 
:filter-entity nil 
:filter-example-block nil 
:filter-export-block nil 
:filter-export-snippet nil 
:filter-final-output (org-e-html-final-function) 
:filter-fixed-width nil 
:filter-footnote-definition nil 
:filter-footnote-reference nil 
:filter-headline nil 
:filter-horizontal-rule nil 
:filter-inline-babel-call nil 
:filter-inline-src-block nil 
:filter-inlinetask nil 
:filter-italic nil 
:filter-item nil 
:filter-keyword nil 
:filter-latex-environment nil 
:filter-latex-fragment nil 
:filter-line-break nil 
:filter-link nil 
:filter-macro nil 
:filter-paragraph nil 
:filter-parse-tree nil 
:filter-plain-list nil 
:filter-plain-text nil 
:filter-planning nil 
:filter-property-drawer nil 
:filter-quote-block nil 
:filter-quote-section nil 
:filter-radio-target nil 
:filter-section nil 
:filter-special-block nil 
:filter-src-block nil 
:filter-statistics-cookie nil 
:filter-strike-through nil 
:filter-subscript nil 
:filter-superscript nil 
:filter-table nil 
:filter-table-cell nil 
:filter-table-row nil 
:filter-target nil 
:filter-timestamp nil 
:filter-underline nil 
:filter-verbatim nil 
:filter-verse-block nil 


:parse-tree 
(org-data nil

(section (
:begin 1 
:end 42 
:contents-begin 1 
:contents-end 41 
:post-blank 1 
:parent #1) 

(keyword (
:key "TITLE" 
:value "A simple example Org-mode file" 
:begin 1 
:end 41 
:post-blank 0 
:parent #2))) 

(headline (
:raw-value "This file has a top level heading" 
:title ("This file has a top level heading") 
:begin 42 
:end 2136 
:pre-blank 0 
:hiddenp outline 
:contents-begin 120 
:contents-end 2136 
:level 1 
:priority nil 
:tags ("iorg" "bar") 
:todo-keyword "TODO" 
:todo-type todo 
:scheduled nil 
:deadline nil 
:timestamp nil 
:clock nil 
:post-blank 0 
:footnote-section-p nil 
:archivedp nil 
:commentedp nil 
:quotedp nil 
:iorg-property "foo" 
:html-form "http
://localhost
:8000/make-me-interactive-html" 
:html-button-value "Send edits" 
:category "???" 
:parent #1) 

(section (
:begin 120 
:end 2136 
:contents-begin 120 
:contents-end 2136 
:post-blank 0 
:parent #2) 

(property-drawer (
:begin 120 
:end 264 
:hiddenp outline 
:properties (("html-button-value" . "Send edits") ("html-form" . "http
://localhost
:8000/make-me-interactive-html") ("iorg-property" . "foo")) 
:post-blank 1 
:parent #3)) 

(paragraph (
:begin 264 
:end 359 
:contents-begin 264 
:contents-end 358 
:post-blank 0 
:parent #3) "This heading has five components.  Lets see if we can edit all five
through the web interface.") 

(plain-list (
:type ordered 
:begin 359 
:end 689 
:contents-begin 359 
:contents-end 688 
:structure ((359 0 "1. " nil nil nil 425) (425 0 "2. " nil nil nil 495) (495 0 "3. " nil nil nil 539) (539 0 "4. " nil nil nil 619) (619 0 "5. " nil nil nil 688)) 
:post-blank 1 
:parent #3) 

(item (
:bullet "1. " 
:begin 359 
:end 425 
:contents-begin 362 
:contents-end 425 
:checkbox nil 
:counter nil 
:tag nil 
:hiddenp nil 
:structure ((359 0 "1. " nil nil nil 425) (425 0 "2. " nil nil nil 495) (495 0 "3. " nil nil nil 539) (539 0 "4. " nil nil nil 619) (619 0 "5. " nil nil nil 688)) 
:post-blank 0 
:parent #4) 

(paragraph (
:begin 362 
:end 425 
:contents-begin 362 
:contents-end 424 
:post-blank 0 
:parent #5) "task state, currently this is " (verbatim (
:value "TODO" 
:begin 392 
:end 399 
:post-blank 1 
:parent #6)) "lets change it to " (verbatim (
:value "DONE" 
:begin 417 
:end 423 
:post-blank 0 
:parent #6)) ".")) 

(item (
:bullet "2. " 
:begin 425 
:end 495 
:contents-begin 428 
:contents-end 495 
:checkbox nil 
:counter nil 
:tag nil 
:hiddenp nil 
:structure ((359 0 "1. " nil nil nil 425) (425 0 "2. " nil nil nil 495) (495 0 "3. " nil nil nil 539) (539 0 "4. " nil nil nil 619) (619 0 "5. " nil nil nil 688)) 
:post-blank 0 
:parent #4) 

(paragraph (
:begin 428 
:end 495 
:contents-begin 428 
:contents-end 494 
:post-blank 0 
:parent #5) "a property, try to change the " (verbatim (
:value "iorg-property" 
:begin 458 
:end 474 
:post-blank 1 
:parent #6)) "from " (verbatim (
:value "foo" 
:begin 479 
:end 485 
:post-blank 1 
:parent #6)) "to " (verbatim (
:value "bar" 
:begin 488 
:end 493 
:post-blank 0 
:parent #6)) ".")) 

(item (
:bullet "3. " 
:begin 495 
:end 539 
:contents-begin 498 
:contents-end 539 
:checkbox nil 
:counter nil 
:tag nil 
:hiddenp nil 
:structure ((359 0 "1. " nil nil nil 425) (425 0 "2. " nil nil nil 495) (495 0 "3. " nil nil nil 539) (539 0 "4. " nil nil nil 619) (619 0 "5. " nil nil nil 688)) 
:post-blank 0 
:parent #4) 

(paragraph (
:begin 498 
:end 539 
:contents-begin 498 
:contents-end 538 
:post-blank 0 
:parent #5) "tag, change the tag from " (verbatim (
:value "bar" 
:begin 523 
:end 529 
:post-blank 1 
:parent #6)) "to " (verbatim (
:value "foo" 
:begin 532 
:end 537 
:post-blank 0 
:parent #6)) ".")) 

(item (
:bullet "4. " 
:begin 539 
:end 619 
:contents-begin 542 
:contents-end 619 
:checkbox nil 
:counter nil 
:tag nil 
:hiddenp nil 
:structure ((359 0 "1. " nil nil nil 425) (425 0 "2. " nil nil nil 495) (495 0 "3. " nil nil nil 539) (539 0 "4. " nil nil nil 619) (619 0 "5. " nil nil nil 688)) 
:post-blank 0 
:parent #4) 

(paragraph (
:begin 542 
:end 619 
:contents-begin 542 
:contents-end 618 
:post-blank 0 
:parent #5) "heading text, allow the heading text to be edited through the web interface.")) 

(item (
:bullet "5. " 
:begin 619 
:end 688 
:contents-begin 622 
:contents-end 688 
:checkbox nil 
:counter nil 
:tag nil 
:hiddenp nil 
:structure ((359 0 "1. " nil nil nil 425) (425 0 "2. " nil nil nil 495) (495 0 "3. " nil nil nil 539) (539 0 "4. " nil nil nil 619) (619 0 "5. " nil nil nil 688)) 
:post-blank 0 
:parent #4) 

(paragraph (
:begin 622 
:end 688 
:contents-begin 622 
:contents-end 687 
:post-blank 0 
:parent #5) "body text, allow this text to be edited through the web interface"))) 

(paragraph (
:begin 689 
:end 1096 
:contents-begin 689 
:contents-end 1095 
:post-blank 0 
:parent #3) "The five items listed about should be in rough order of difficulty.
So lets work through them in order.  The simplest should be changing
the task state.  We can start with a simple button on the final html
page next to the headline, the text of this button can be \"finish\",
and pressing it will change the TODO state in this Org-mode file on
the server to DONE.  The implementation should look like this...") 

(plain-list (
:type unordered 
:begin 1096 
:end 1567 
:contents-begin 1096 
:contents-end 1566 
:structure ((1096 0 "- " nil nil nil 1277) (1277 0 "- " nil nil nil 1467) (1467 0 "- " nil nil nil 1566)) 
:post-blank 1 
:parent #3) 

(item (
:bullet "- " 
:begin 1096 
:end 1277 
:contents-begin 1098 
:contents-end 1277 
:checkbox nil 
:counter nil 
:tag nil 
:hiddenp outline 
:structure ((1096 0 "- " nil nil nil 1277) (1277 0 "- " nil nil nil 1467) (1467 0 "- " nil nil nil 1566)) 
:post-blank 0 
:parent #4) 

(paragraph (
:begin 1098 
:end 1277 
:contents-begin 1098 
:contents-end 1276 
:post-blank 0 
:parent #5) "add a function to the `org-export-html-final-hook' which will scan
  through the resulting HTML and will add the html/JS necessary to
  include this button on the final web page.")) 

(item (
:bullet "- " 
:begin 1277 
:end 1467 
:contents-begin 1279 
:contents-end 1467 
:checkbox nil 
:counter nil 
:tag nil 
:hiddenp outline 
:structure ((1096 0 "- " nil nil nil 1277) (1277 0 "- " nil nil nil 1467) (1467 0 "- " nil nil nil 1566)) 
:post-blank 0 
:parent #4) 

(paragraph (
:begin 1279 
:end 1467 
:contents-begin 1279 
:contents-end 1466 
:post-blank 0 
:parent #5) "start an elnode server and add two different handlers, one will
  serve up this web page (with the above hook), and the second will
  handle the form data returned by the \"finish\" button.")) 

(item (
:bullet "- " 
:begin 1467 
:end 1566 
:contents-begin 1469 
:contents-end 1566 
:checkbox nil 
:counter nil 
:tag nil 
:hiddenp outline 
:structure ((1096 0 "- " nil nil nil 1277) (1277 0 "- " nil nil nil 1467) (1467 0 "- " nil nil nil 1566)) 
:post-blank 0 
:parent #4) 

(paragraph (
:begin 1469 
:end 1566 
:contents-begin 1469 
:contents-end 1565 
:post-blank 0 
:parent #5) "the second handler will use the `org-todo' function to change the
  actual state of the heading."))) 

(paragraph (
:begin 1567 
:end 1806 
:contents-begin 1567 
:contents-end 1804 
:post-blank 1 
:parent #3) "Once this is working we should have a much better idea of what is
required to make this process work end-to-end.  With luck we may have
some initial functionality by the end of next week (some number of the
above 5 parts being editable).") 

(paragraph (
:begin 1806 
:end 2046 
:contents-begin 1806 
:contents-end 2044 
:post-blank 1 
:parent #3) "Lets keep all of the code implementing this in " (link (
:type "file" 
:path "simple.el" 
:raw-link "file
:simple.el" 
:begin 1853 
:end 1867 
:contents-begin nil 
:contents-end nil 
:post-blank 0 
:parent #4)) ", once it
is written we can see what it look like and decide how to better
organize it into a directory structure which we'll want to keep for
the remainder of the iorg project.") 

(paragraph (
:begin 2046 
:end 2136 
:contents-begin 2046 
:contents-end 2135 
:post-blank 0 
:parent #3) "I've stubbed out a few functions in " (link (
:type "file" 
:path "simple.el" 
:raw-link "file
:simple.el" 
:begin 2082 
:end 2096 
:contents-begin nil 
:contents-end nil 
:post-blank 0 
:parent #4)) ", add new functions
as they are needed.")))) 
:ignore-list nil 
:headline-offset 0 
:target-list nil 
:headline-numbering (((headline (
:raw-value "This file has a top level heading" 
:title ("This file has a top level heading") 
:begin 42 
:end 2136 
:pre-blank 0 
:hiddenp outline 
:contents-begin 120 
:contents-end 2136 
:level 1 
:priority nil 
:tags ("iorg" "bar") 
:todo-keyword "TODO" 
:todo-type todo 
:scheduled nil 
:deadline nil 
:timestamp nil 
:clock nil 
:post-blank 0 
:footnote-section-p nil 
:archivedp nil 
:commentedp nil 
:quotedp nil 
:iorg-property "foo" 
:html-form "http
://localhost
:8000/make-me-interactive-html" 
:html-button-value "Send edits" 
:category "???" 
:parent (org-data nil (section (
:begin 1 
:end 42 
:contents-begin 1 
:contents-end 41 
:post-blank 1 
:parent #5) 

(keyword (
:key "TITLE" 
:value "A simple example Org-mode file" 
:begin 1 
:end 41 
:post-blank 0 
:parent #6))) #3)) 

(section (
:begin 120 
:end 2136 
:contents-begin 120 
:contents-end 2136 
:post-blank 0 
:parent #3) 

(property-drawer (
:begin 120 
:end 264 
:hiddenp outline 
:properties (("html-button-value" . "Send edits") ("html-form" . "http
://localhost
:8000/make-me-interactive-html") ("iorg-property" . "foo")) 
:post-blank 1 
:parent #4)) 

(paragraph (
:begin 264 
:end 359 
:contents-begin 264 
:contents-end 358 
:post-blank 0 
:parent #4) "This heading has five components.  Lets see if we can edit all five
through the web interface.") 

(plain-list (
:type ordered 
:begin 359 
:end 689 
:contents-begin 359 
:contents-end 688 
:structure ((359 0 "1. " nil nil nil 425) (425 0 "2. " nil nil nil 495) (495 0 "3. " nil nil nil 539) (539 0 "4. " nil nil nil 619) (619 0 "5. " nil nil nil 688)) 
:post-blank 1 
:parent #4) 

(item (
:bullet "1. " 
:begin 359 
:end 425 
:contents-begin 362 
:contents-end 425 
:checkbox nil 
:counter nil 
:tag nil 
:hiddenp nil 
:structure ((359 0 "1. " nil nil nil 425) (425 0 "2. " nil nil nil 495) (495 0 "3. " nil nil nil 539) (539 0 "4. " nil nil nil 619) (619 0 "5. " nil nil nil 688)) 
:post-blank 0 
:parent #5) 

(paragraph (
:begin 362 
:end 425 
:contents-begin 362 
:contents-end 424 
:post-blank 0 
:parent #6) "task state, currently this is " (verbatim (
:value "TODO" 
:begin 392 
:end 399 
:post-blank 1 
:parent #7)) "lets change it to " (verbatim (
:value "DONE" 
:begin 417 
:end 423 
:post-blank 0 
:parent #7)) ".")) 

(item (
:bullet "2. " 
:begin 425 
:end 495 
:contents-begin 428 
:contents-end 495 
:checkbox nil 
:counter nil 
:tag nil 
:hiddenp nil 
:structure ((359 0 "1. " nil nil nil 425) (425 0 "2. " nil nil nil 495) (495 0 "3. " nil nil nil 539) (539 0 "4. " nil nil nil 619) (619 0 "5. " nil nil nil 688)) 
:post-blank 0 
:parent #5) 

(paragraph (
:begin 428 
:end 495 
:contents-begin 428 
:contents-end 494 
:post-blank 0 
:parent #6) "a property, try to change the " (verbatim (
:value "iorg-property" 
:begin 458 
:end 474 
:post-blank 1 
:parent #7)) "from " (verbatim (
:value "foo" 
:begin 479 
:end 485 
:post-blank 1 
:parent #7)) "to " (verbatim (
:value "bar" 
:begin 488 
:end 493 
:post-blank 0 
:parent #7)) ".")) 

(item (
:bullet "3. " 
:begin 495 
:end 539 
:contents-begin 498 
:contents-end 539 
:checkbox nil 
:counter nil 
:tag nil 
:hiddenp nil 
:structure ((359 0 "1. " nil nil nil 425) (425 0 "2. " nil nil nil 495) (495 0 "3. " nil nil nil 539) (539 0 "4. " nil nil nil 619) (619 0 "5. " nil nil nil 688)) 
:post-blank 0 
:parent #5) 

(paragraph (
:begin 498 
:end 539 
:contents-begin 498 
:contents-end 538 
:post-blank 0 
:parent #6) "tag, change the tag from " (verbatim (
:value "bar" 
:begin 523 
:end 529 
:post-blank 1 
:parent #7)) "to " (verbatim (
:value "foo" 
:begin 532 
:end 537 
:post-blank 0 
:parent #7)) ".")) 

(item (
:bullet "4. " 
:begin 539 
:end 619 
:contents-begin 542 
:contents-end 619 
:checkbox nil 
:counter nil 
:tag nil 
:hiddenp nil 
:structure ((359 0 "1. " nil nil nil 425) (425 0 "2. " nil nil nil 495) (495 0 "3. " nil nil nil 539) (539 0 "4. " nil nil nil 619) (619 0 "5. " nil nil nil 688)) 
:post-blank 0 
:parent #5) 

(paragraph (
:begin 542 
:end 619 
:contents-begin 542 
:contents-end 618 
:post-blank 0 
:parent #6) "heading text, allow the heading text to be edited through the web interface.")) 

(item (
:bullet "5. " 
:begin 619 
:end 688 
:contents-begin 622 
:contents-end 688 
:checkbox nil 
:counter nil 
:tag nil 
:hiddenp nil 
:structure ((359 0 "1. " nil nil nil 425) (425 0 "2. " nil nil nil 495) (495 0 "3. " nil nil nil 539) (539 0 "4. " nil nil nil 619) (619 0 "5. " nil nil nil 688)) 
:post-blank 0 
:parent #5) 

(paragraph (
:begin 622 
:end 688 
:contents-begin 622 
:contents-end 687 
:post-blank 0 
:parent #6) "body text, allow this text to be edited through the web interface"))) 

(paragraph (
:begin 689 
:end 1096 
:contents-begin 689 
:contents-end 1095 
:post-blank 0 
:parent #4) "The five items listed about should be in rough order of difficulty.
So lets work through them in order.  The simplest should be changing
the task state.  We can start with a simple button on the final html
page next to the headline, the text of this button can be \"finish\",
and pressing it will change the TODO state in this Org-mode file on
the server to DONE.  The implementation should look like this...") 

(plain-list (
:type unordered 
:begin 1096 
:end 1567 
:contents-begin 1096 
:contents-end 1566 
:structure ((1096 0 "- " nil nil nil 1277) (1277 0 "- " nil nil nil 1467) (1467 0 "- " nil nil nil 1566)) 
:post-blank 1 
:parent #4) 

(item (
:bullet "- " 
:begin 1096 
:end 1277 
:contents-begin 1098 
:contents-end 1277 
:checkbox nil 
:counter nil 
:tag nil 
:hiddenp outline 
:structure ((1096 0 "- " nil nil nil 1277) (1277 0 "- " nil nil nil 1467) (1467 0 "- " nil nil nil 1566)) 
:post-blank 0 
:parent #5) 

(paragraph (
:begin 1098 
:end 1277 
:contents-begin 1098 
:contents-end 1276 
:post-blank 0 
:parent #6) "add a function to the `org-export-html-final-hook' which will scan
  through the resulting HTML and will add the html/JS necessary to
  include this button on the final web page.")) 

(item (
:bullet "- " 
:begin 1277 
:end 1467 
:contents-begin 1279 
:contents-end 1467 
:checkbox nil 
:counter nil 
:tag nil 
:hiddenp outline 
:structure ((1096 0 "- " nil nil nil 1277) (1277 0 "- " nil nil nil 1467) (1467 0 "- " nil nil nil 1566)) 
:post-blank 0 
:parent #5) 

(paragraph (
:begin 1279 
:end 1467 
:contents-begin 1279 
:contents-end 1466 
:post-blank 0 
:parent #6) "start an elnode server and add two different handlers, one will
  serve up this web page (with the above hook), and the second will
  handle the form data returned by the \"finish\" button.")) 

(item (
:bullet "- " 
:begin 1467 
:end 1566 
:contents-begin 1469 
:contents-end 1566 
:checkbox nil 
:counter nil 
:tag nil 
:hiddenp outline 
:structure ((1096 0 "- " nil nil nil 1277) (1277 0 "- " nil nil nil 1467) (1467 0 "- " nil nil nil 1566)) 
:post-blank 0 
:parent #5) 

(paragraph (
:begin 1469 
:end 1566 
:contents-begin 1469 
:contents-end 1565 
:post-blank 0 
:parent #6) "the second handler will use the `org-todo' function to change the
  actual state of the heading."))) 

(paragraph (
:begin 1567 
:end 1806 
:contents-begin 1567 
:contents-end 1804 
:post-blank 1 
:parent #4) "Once this is working we should have a much better idea of what is
required to make this process work end-to-end.  With luck we may have
some initial functionality by the end of next week (some number of the
above 5 parts being editable).") 

(paragraph (
:begin 1806 
:end 2046 
:contents-begin 1806 
:contents-end 2044 
:post-blank 1 
:parent #4) "Lets keep all of the code implementing this in " (link (
:type "file" 
:path "simple.el" 
:raw-link "file
:simple.el" 
:begin 1853 
:end 1867 
:contents-begin nil 
:contents-end nil 
:post-blank 0 
:parent #5)) ", once it
is written we can see what it look like and decide how to better
organize it into a directory structure which we'll want to keep for
the remainder of the iorg project.") 

(paragraph (
:begin 2046 
:end 2136 
:contents-begin 2046 
:contents-end 2135 
:post-blank 0 
:parent #4) "I've stubbed out a few functions in " (link (
:type "file" 
:path "simple.el" 
:raw-link "file
:simple.el" 
:begin 2082 
:end 2096 
:contents-begin nil 
:contents-end nil 
:post-blank 0 
:parent #5)) ", add new functions
as they are needed."))) 1)))

#+end_src

*** Export options for subtree

Add export the following option to the function below?

#+begin_src emacs-lisp
      (when (setq prop (org-entry-get (point) "IORG"))
        (setq plist (plist-put plist
                               :html-action prop
                               :html-send prop
                               :others prop)))
#+end_src

Probably not necessary, because all properties are stored in the
'headline' element anyway. 


#+begin_src emacs-lisp
(defun org-export-get-subtree-options ()
  "Get export options in subtree at point.

Assume point is at subtree's beginning.

Return options as a plist."
  (let (prop plist)
    (when (setq prop (progn (looking-at org-todo-line-regexp)
			    (or (save-match-data
				  (org-entry-get (point) "EXPORT_TITLE"))
				(org-match-string-no-properties 3))))
      (setq plist
	    (plist-put
	     plist :title
	     (org-element-parse-secondary-string
	      prop
	      (cdr (assq 'keyword org-element-string-restrictions))))))
    (when (setq prop (org-entry-get (point) "EXPORT_TEXT"))
      (setq plist (plist-put plist :text prop)))
    (when (setq prop (org-entry-get (point) "EXPORT_AUTHOR"))
      (setq plist (plist-put plist :author prop)))
    (when (setq prop (org-entry-get (point) "EXPORT_DATE"))
      (setq plist (plist-put plist :date prop)))
    (when (setq prop (org-entry-get (point) "EXPORT_OPTIONS"))
      (setq plist (org-export-add-options-to-plist plist prop)))
    plist))
#+end_src

*** Org Exporter: important read
[[http://orgmode.org/worg/dev/org-export-reference.html][Org Export Reference]]
*** Install customized formatting functions 
If the new exporter would be perfectly modularisized, i.e. some generic
exporter functions calls a specific back-end function for each greater
element, that then calls an atomic transcoding function for each
subelement, things would be very easy for us. But it isn't. 

For headline todos and tags, there are such atomic transcoding
functions in org-e-html, and it was quick to write iorg variants of them
(and the results, although not functional yet, look nice, see
simple.html in the repo). 

Otherwise its quite difficult to figure out where those back-end
transcoding functions are called from the generic exporter. That would
be the place to put a switch: (if :iorg: then iorg-transcode() else
org-trancode()). 

At least there are 3 possibilities to put customized formatting
functions: 
,---------------------------------------------------------
| 839:(defcustom org-e-html-format-headline-function nil
| 946:(defcustom org-e-html-format-drawer-function nil
| 967:(defcustom org-e-html-format-inlinetask-function nil
`---------------------------------------------------------

So with this I could install my own format headline function:

,------------------------------------------------------------------------
| (setq org-e-html-format-headline-function 'iorg-e-html-format-headline)
`------------------------------------------------------------------------

*** Access the input Org file
Since inside a html textfield or textarea we want to present the
editable text in Org mode syntax (don't we?), I can access to the
original Org buffer that is being exported via the comm-chan

,---------------------------------------------------
| :input-file /home/tj/git/bugpile/simple/simple.org
`---------------------------------------------------

Since the parse-tree holds the begin/end information for all
buffer-elements, I could just copy the relevant parts from the Org
buffer into the form field, e.g.

,--------------------------------------------------------------------
| (format "<textarea>%s</textarea> (copy-region-as-kill BEG END))
`--------------------------------------------------------------------

*** Define derived backend (bug)
Bug in (org-export-define-derived-backend iorg e-html):
#+begin_src emacs-lisp
  ;;Debugger entered--Lisp error:
  (wrong-type-argument symbolp
  (org-iorg-wrap org-e-html-paragraph))
  fboundp((org-iorg-wrap org-e-html-paragraph))
  (and
  (fboundp transcoder)
  transcoder)
  (let
  ((transcoder
  (cdr
  (assq type
  (plist-get info :translate-alist)))))
  (and
  (fboundp transcoder)
  transcoder))
  (if
  (eq type
  (quote org-data))
  (lambda
  (blob contents info)
  contents)
  (let
  ((transcoder
  (cdr
  (assq type
  (plist-get info :translate-alist)))))
  (and
  (fboundp transcoder)
  transcoder)))
  (let
  ((type
  (org-element-type blob)))
  (if
  (eq type
  (quote org-data))
  (lambda
  (blob contents info)
  contents)
  (let
  ((transcoder
  (cdr
  (assq type
  (plist-get info :translate-alist)))))
  (and
  (fboundp transcoder)
  transcoder))))
  org-export-transcoder((...
#+end_src

*** What are the elisp library structuring conventions?
E.g.:
#+begin_src emacs-lisp

;;; Customisation group
(def ...)
;;;; Generic Wrapper
(def ...)
#+end_src

- is it reverse system like in Org files, i.e. ;;;; is a parent of ;;;
  is a parent of ;; is a parent of ;  ?
- whats the conventional top-level (;;;; or ;;;)?
- where to put the =^L= - only top-level? 
