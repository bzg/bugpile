# -*- mode:org -*-
#+Options: ^:nil
##+CATEGORY: bugpile

* Tasks [0/15]
  :PROPERTIES:
  :CUSTOM_ID: tasks
  :END:
Alright, most of the first tasks should be able to re-use code from
the simple/ directory.

Also, as you're working please remember to auto-fill your
documentation strings so they don't overflow.  The reason they don't
auto-fill on the first line is because the first line is supposed to
be a self-contained sentence of <=67 characters.

** TODO Serve a directory of Org-mode files using elnode
This will include writing a function to launch an elnode server,
writing the appropriate handler(s) for serving the pages.  The pages
should be exported using iorg-html.

*** Notes
1. In a defcustom like this, is it possible to use a function that
   returns a string as value?

#+begin_src emacs-lisp
  :type '(alist :key-type string
                :value-type string)
;; e.g.
("project-dir" . (expand-file-name ...))
#+end_src

#+begin_quote Eric
Yes, with =defcustom= and =defvar= you can use arbitrary code to
return the value to be stored in the defined symbol.
#+end_quote

2. How to read and write defcustoms?
see iorg-projects.el

#+begin_src emacs-lisp
(defcustom iorg-projects-config
  '(("project" . "bugpile")
    ("dir" . "~/git")))

  :group 'iorg-projects
  :type '(alist :key-type string
                :value-type string))
#+end_src

How to change "bugpile" to "something-else", how to read the value of
"dir", and how to add ("key" . "val") to the alist? 

Just treat the defcustom like every other alist (use assoc and append
e.g.) or are there special considereations because its a defcustom
(like customize-set-variable or customize-option e.g.)?

#+begin_quote Eric
No special considerations, defcustom variables are just like any other
variables except that the Emacs customization interface will be
available for users who want to change the variable's values.
#+end_quote
 
What, if I actually want to customize several projects in that
variable, I want a key "project1" and then a alist of values for that
project, and then another key "project2" and then another alist of
values for project2 etc. ?

Like this:  (?)

3. What is our core library (like org.el for Org)? 

iorg-server.el or rather iorg-projects.el? rather iorg-server.el?

#+begin_quote Eric
I don't know that a *single* key file is required.  You could add a
main =iorg.el= file which =requires= all of the libraries and then
runs =(provide 'iorg)=.
#+end_quote

4. How to write (interactive ...) 

when there are &optinal and &rest args - ask for the optional values
or not?

#+begin_quote Eric
The interactive directive is smart about interacting with &optional
arguments.  If the argument is supplied then it will be used, if the
argument is not supplied, and the function is run interactively, then
the interactive directive will try to supply a value.  For more
information run (elisp-index-search "interactive"), or just run
elisp-index-search and the type in "interactive" interactively.  The
elisp-index-search function exemplifies this behavior.
#+end_quote

#+begin_src emacs-lisp
(defcustom iorg-projects-config
 '(
("project1" .
 (("name" . "bugpile")("dir" . "~/git") ... )) 
("project2" .
(("name" . "something-else")("dir" . "~/git") ... ))
)

  :group 'iorg-projects
  :type '(alist :key-type string
                :value-type alist))
#+end_src

** TODO Change a TODO state using the web interface
This will probably involve the addition of an elnode handler to manage
POST requests.

The actual changes to the Org-mode files should use fairly abstract
functions from iorg-db.el which we will be able to easily re-use when
implementing MVC models.

This will be harder than the next three tasks as it will require you
to make decisions about how to find entries in Org-mode files, how to
pass such location information through iorg-html into forms, and then
back from the forms to the elnode POST handler.

*** Notes

** TODO Change a property using the web interface
I don't know if this will require a new handler or if it will be able
to re-use the handler from the previous task.  I imagine it will
probably need at least one new function in iorg-db.el.

*** Notes

** TODO Change a tag using the web interface
Same instructions as the previous task.

*** Notes

** TODO Change a headline body text using the web interface
Same instructions as the previous task.

*** Notes

** TODO Commit an Org-mode file to DVCS
This will involve writing a function which takes location information
(preferably in a similar/same format to the location information used
by elnode handlers above), and a commit message, and possibly other
information (user name?) and performs the DVCS commit.

This functionality should live in iorg-db.el under a main ;;; section.

*** Notes

** TODO Decide when to commit changes to DVCS
- Should this happen on every edit?
- Should this be user-configurable through iorg properties?
- Should commit messages be generated automatically, or part of the forms?

Once you have an idea of how this should work, just write it out here.

*** Notes

** TODO Update the forms to accommodate DVCS
Based on your decisions in the previous task.

*** Notes

** TODO Update the handlers to accommodate the DVCS 
Based on your decisions in the previous task.

This will include changes to the update functions in iorg-db.el
(probably make the commit step optional?).

*** Notes

** TODO Write an update to the Org-mode mailing list              :milestone:
This should describe the usage of iorg to make an Org-mode file
editable through a web interface.  It should include step by step
instructions for how to serve a directory of Org-mode files using
elnode, then how to edit them through the web interface.

This will be our first major mile stone.

*** Notes

** TODO Plan out MVC view implementation
What syntactic constructs will need to be added to an Org-mode file
for it to serve as a template?  Do we need new syntactic devices for
views or can we re-use some existing Org-mode syntax?

** TODO Implement iorg-view.el towards a simple working example
Based on your decisions in the above, add functionality to iorg-view
until a simple example of a view backed by content from another
Org-mode file is working.

Probably better to setup the example first before writing any code, so
that you can test incrementally.  It would be great to define ert
tests for this, but that can be optional depending on how things are
going.

** TODO Plan out MVC controller implementation
I'd like to collaborate on this step both because I'm less sure what
will be involved and I'd like to know, and also because I have some
experience with "meta-programming" type tasks like this one.

What sort of interface to we want to provide to iorg users/developers
through which they can define new elnode handlers?

** TODO Implement iorg-controller.el towards a simple working example
Again, first write out the example which should work to enable
incremental testing and feedback.

** TODO Package iorg into a separate git repository               :milestone:
- write a brief README
- clean up the code
- clean up any loose files (e.g., example html exports etc...)

* GSoC Project Evaluation
** WAITING update org mailing-list <2012-06-04 Mo 10:00 +1w>        :WAITING:
   :LOGBOOK:
   - State "WAITING"    from "TODO"       [2012-06-11 Mo 12:22] \\
     Get something to work with simple.el first
   :END:
** TODO status mail mentors <2012-06-07 Do 10:00 +1w>
* Community bonding [berlin] <2012-04-23 Mo>--<2012-05-09 Mi>
** DONE Bugpile Requirements Analysis
   CLOSED: [2012-06-01 Fr 21:07]
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2012-06-01 Fr 21:07]
   :END:
*** DONE Use Cases in textual form
    CLOSED: [2012-06-01 Fr 16:54]
    :LOGBOOK:
    - State "DONE"       from "TODO"       [2012-06-01 Fr 16:54]
    CLOCK: [2012-05-03 Do 18:27]--[2012-05-03 Do 18:30] =>  0:03
    CLOCK: [2012-05-03 Do 18:25]--[2012-05-03 Do 18:26] =>  0:01
    CLOCK: [2012-05-03 Do 18:16]--[2012-05-03 Do 18:18] =>  0:02
    :END:

**** DONE [req-uc-txt] Register as user
     CLOSED: [2012-05-02 Mi 21:13]
     :LOGBOOK:
     - State "DONE"       from "TODO"       [2012-05-02 Mi 21:13]
     :END:
**** DONE [req-uc-txt] Edit user details
     CLOSED: [2012-05-02 Mi 21:13]
     :LOGBOOK:
     - State "DONE"       from "TODO"       [2012-05-02 Mi 21:13]
     :END:

**** DONE [req-uc-txt] Login
     CLOSED: [2012-05-02 Mi 21:13]
     :LOGBOOK:
     - State "DONE"       from "TODO"       [2012-05-02 Mi 21:13]
     :END:

**** DONE [req-uc-txt] Logout
     CLOSED: [2012-05-02 Mi 21:13]
     :LOGBOOK:
     - State "DONE"       from "TODO"       [2012-05-02 Mi 21:13]
     :END:

**** DONE [req-uc-txt] Add user to assignees
     CLOSED: [2012-05-03 Do 18:00] SCHEDULED: <2012-05-03 Do>
     :LOGBOOK:
     - State "DONE"       from "NEXT"       [2012-05-03 Do 18:00]
     CLOCK: [2012-05-03 Do 17:24]--[2012-05-03 Do 17:59] =>  0:35
     :END:
Deleted, is special case of search users and take actions on selected
users. 
**** DONE [req-uc-txt] Remove user from assignees
     CLOSED: [2012-05-03 Do 18:16] SCHEDULED: <2012-05-03 Do>
     :LOGBOOK:
     - State "DONE"       from "NEXT"       [2012-05-03 Do 18:16]
     CLOCK: [2012-05-03 Do 17:59]--[2012-05-03 Do 18:16] =>  0:17
     :END:

Deleted, is special case of search users and take actions on selected
users. 

**** DONE [req-uc-txt] Add user to notification list
     CLOSED: [2012-05-03 Do 18:25] SCHEDULED: <2012-05-03 Do>
     :LOGBOOK:
     - State "DONE"       from "NEXT"       [2012-05-03 Do 18:25]
     CLOCK: [2012-05-03 Do 18:18]--[2012-05-03 Do 18:25] =>  0:07
     :END:
Deleted, is a special case of 'take action on selected task'

**** DONE [req-uc-txt] Remove user from notification list
     CLOSED: [2012-05-03 Do 18:25] SCHEDULED: <2012-05-03 Do>
     - State "DONE"       from "NEXT"       [2012-05-03 Do 18:25]
Deleted, is a special case of 'take action on selected task'

**** DONE [req-uc-txt] Add reminder
     CLOSED: [2012-05-03 Do 18:26] SCHEDULED: <2012-05-03 Do>
     - State "DONE"       from "NEXT"       [2012-05-03 Do 18:26]
Deleted, is a special case of 'take action on selected task'

**** DONE [req-uc-txt] Remove reminder
     CLOSED: [2012-05-03 Do 18:27] SCHEDULED: <2012-05-03 Do>
     :LOGBOOK:
     - State "DONE"       from "NEXT"       [2012-05-03 Do 18:27]
     CLOCK: [2012-05-03 Do 18:26]--[2012-05-03 Do 18:27] =>  0:01
     :END:

Deleted, is a special case of 'take action on selected task'

*** DONE Integrated UML Modelling of Use Cases and UI
    CLOSED: [2012-06-01 Fr 16:53]
    :LOGBOOK:
    - State "DONE"       from "TODO"       [2012-06-01 Fr 16:53]
    CLOCK: [2012-05-05 Sa 20:07]--[2012-05-06 So 11:46] => 15:39
    :END:

**** DONE [req-uc-uml] Register as user
     CLOSED: [2012-05-02 Mi 21:18]
     :LOGBOOK:
     - State "DONE"       from "TODO"       [2012-05-02 Mi 21:18]
     :END:
**** DONE [req-uc-uml] Edit user details
     CLOSED: [2012-05-02 Mi 21:18]
     :LOGBOOK:
     - State "DONE"       from "TODO"       [2012-05-02 Mi 21:18]
     :END:

**** DONE [req-uc-uml] Login
     CLOSED: [2012-05-02 Mi 21:18]
     :LOGBOOK:
     - State "DONE"       from "TODO"       [2012-05-02 Mi 21:18]
     :END:

**** DONE [req-uc-uml] Logout
     CLOSED: [2012-05-02 Mi 21:18]
     :LOGBOOK:
     - State "DONE"       from "TODO"       [2012-05-02 Mi 21:18]
     :END:

**** DONE [req-uc-uml] Search users
     CLOSED: [2012-05-05 Sa 19:17] SCHEDULED: <2012-05-05 Sa>
     :LOGBOOK:
     - State "DONE"       from "TODO"       [2012-05-05 Sa 19:17]
     - State "TODO"       from "DONE"       [2012-05-05 Sa 16:43]
     - State "DONE"       from ""           [2012-05-05 Sa 16:43]
     :END:
**** DONE [req-uc-uml] Take action on selected users
     CLOSED: [2012-05-05 Sa 20:07] SCHEDULED: <2012-05-05 Sa>
     :LOGBOOK:
     - State "DONE"       from "NEXT"       [2012-05-05 Sa 20:07]
     CLOCK: [2012-05-05 Sa 19:18]--[2012-05-05 Sa 20:07] =>  0:49
     :END:
**** CANCELLED [req-uc-uml] Add user to assignees                 :CANCELLED:
     CLOSED: [2012-05-05 Sa 16:43] SCHEDULED: <2012-05-04 Fr>
     :LOGBOOK:
     - State "CANCELLED"  from "TODO"       [2012-05-05 Sa 16:43] \\
       use case deleted, is special case of 'search user/ take action on
       selected user'.
     :END:

**** CANCELLED [req-uc-uml] Remove user from assignees            :CANCELLED:
     CLOSED: [2012-05-05 Sa 16:44] SCHEDULED: <2012-05-04 Fr>
     :LOGBOOK:
     - State "CANCELLED"  from "TODO"       [2012-05-05 Sa 16:44] \\
       use case deleted, is special case of 'search user/ take action on
       selected user'.
     :END:

**** CANCELLED [req-uc-uml] Add user to notification list         :CANCELLED:
     CLOSED: [2012-05-05 Sa 16:47] SCHEDULED: <2012-05-04 Fr>
     :LOGBOOK:
     - State "CANCELLED"  from "TODO"       [2012-05-05 Sa 16:47] \\
       use case deleted, is special case of 'search task/ take action on
       selected task.
     :END:

**** CANCELLED [req-uc-uml] Remove user from notification list    :CANCELLED:
     CLOSED: [2012-05-05 Sa 16:47] SCHEDULED: <2012-05-04 Fr>
     :LOGBOOK:
     - State "CANCELLED"  from "TODO"       [2012-05-05 Sa 16:47] \\
       use case deleted, is special case of 'search task/ take action on
       selected task.
     :END:

**** CANCELLED [req-uc-uml] Add reminder                          :CANCELLED:
     CLOSED: [2012-05-05 Sa 16:47] SCHEDULED: <2012-05-04 Fr>
     :LOGBOOK:
     - State "CANCELLED"  from "TODO"       [2012-05-05 Sa 16:47] \\
       use case deleted, is special case of 'search task/ take action on
       selected task.
     :END:

**** CANCELLED [req-uc-uml] Remove reminder                       :CANCELLED:
     CLOSED: [2012-05-05 Sa 16:47] SCHEDULED: <2012-05-04 Fr>
     :LOGBOOK:
     - State "CANCELLED"  from "TODO"       [2012-05-05 Sa 16:47] \\
       use case deleted, is special case of 'search task/ take action on
       selected task.
     :END:

*** DONE Use Case Models
    CLOSED: [2012-06-01 Fr 18:31]
    :LOGBOOK:
    - State "DONE"       from "TODO"       [2012-06-01 Fr 18:31]
    :END:
**** DONE Task management
     CLOSED: [2012-06-01 Fr 16:55]
     :LOGBOOK:
     - State "DONE"       from ""           [2012-06-01 Fr 16:55]
     :END:
     [2012-06-01 Fr 16:55]
**** DONE Project management
     CLOSED: [2012-06-01 Fr 18:31]
     :LOGBOOK:
     - State "DONE"       from ""           [2012-06-01 Fr 18:31]
     :END:
     [2012-06-01 Fr 16:55]
**** DONE User management
     CLOSED: [2012-06-01 Fr 16:55] SCHEDULED: <2012-05-06 So>
     :LOGBOOK:
     - State "DONE"       from "NEXT"       [2012-06-01 Fr 16:55]
     :END:

** DONE Bugpile Software Specification
   CLOSED: [2012-06-01 Fr 18:33]
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2012-06-01 Fr 18:33]
   :END:
*** DONE Transforming Requirements into Specifications
    CLOSED: [2012-06-01 Fr 18:33]
    :LOGBOOK:
    - State "DONE"       from "TODO"       [2012-06-01 Fr 18:33]
    :END:
**** DONE Integrated UML Modelling of Use Cases and UI
     CLOSED: [2012-06-01 Fr 18:32]
     :LOGBOOK:
     - State "DONE"       from "TODO"       [2012-06-01 Fr 18:32]
     CLOCK: [2012-05-05 Sa 16:37]--[2012-05-05 Sa 19:18] =>  2:41
     :END:
******* DONE [spec-uc-uml] Register as user
        CLOSED: [2012-05-05 Sa 15:34] SCHEDULED: <2012-05-03 Do>
        :LOGBOOK:
        - State "DONE"       from "NEXT"       [2012-05-05 Sa 15:34]
        CLOCK: [2012-05-05 Sa 13:43]--[2012-05-05 Sa 15:34] =>  1:51
        :END:
******* DONE [spec-uc-uml] Edit user details
        CLOSED: [2012-05-05 Sa 16:14] SCHEDULED: <2012-05-03 Do>
        :LOGBOOK:
        - State "DONE"       from "NEXT"       [2012-05-05 Sa 16:14]
        CLOCK: [2012-05-05 Sa 15:34]--[2012-05-05 Sa 16:14] =>  0:40
        :END:

******* DONE [spec-uc-uml] Login
        CLOSED: [2012-05-05 Sa 16:25] SCHEDULED: <2012-05-03 Do>
        :LOGBOOK:
        - State "DONE"       from "NEXT"       [2012-05-05 Sa 16:25]
        CLOCK: [2012-05-05 Sa 16:14]--[2012-05-05 Sa 16:25] =>  0:11
        :END:

******* DONE [spec-uc-uml] Logout
        CLOSED: [2012-05-05 Sa 16:37] SCHEDULED: <2012-05-03 Do>
        :LOGBOOK:
        - State "DONE"       from "NEXT"       [2012-05-05 Sa 16:37]
        CLOCK: [2012-05-05 Sa 16:25]--[2012-05-05 Sa 16:37] =>  0:12
        :END:
******* DONE [spec-uc-uml] Search users
        CLOSED: [2012-05-06 So 19:30] SCHEDULED: <2012-05-05 Sa>
        :LOGBOOK:
        - State "DONE"       from "TODO"       [2012-05-06 So 19:30]
        - State "TODO"       from "DONE"       [2012-05-05 Sa 16:43]
        - State "DONE"       from ""           [2012-05-05 Sa 16:43]
        :END:
******* DONE [spec-uc-uml] Take action on selected users
        CLOSED: [2012-05-06 So 19:45] SCHEDULED: <2012-05-05 Sa>
        :LOGBOOK:
        - State "DONE"       from "NEXT"       [2012-05-06 So 19:45]
        CLOCK: [2012-05-06 So 19:30]--[2012-05-06 So 19:45] =>  0:15
        :END:
******* CANCELLED [spec-uc-uml] Add user to assignees             :CANCELLED:
        CLOSED: [2012-05-05 Sa 16:50] SCHEDULED: <2012-05-04 Fr>
        :LOGBOOK:
        - State "CANCELLED"  from "TODO"       [2012-05-05 Sa 16:50] \\
          use case deleted, is special case of 'search user/ take action on
          selected user.
        :END:

******* CANCELLED [spec-uc-uml] Remove user from assignees        :CANCELLED:
        CLOSED: [2012-05-05 Sa 16:51] SCHEDULED: <2012-05-04 Fr>
        :LOGBOOK:
        - State "CANCELLED"  from "TODO"       [2012-05-05 Sa 16:51] \\
          use case deleted, is special case of 'search user/ take action on
          selected user'.
        :END:

******* CANCELLED [spec-uc-uml] Add user to notification list     :CANCELLED:
        CLOSED: [2012-05-05 Sa 16:49] SCHEDULED: <2012-05-04 Fr>
        :LOGBOOK:
        - State "CANCELLED"  from "TODO"       [2012-05-05 Sa 16:49] \\
          use case deleted, is special case of 'search task/ take action on
          selected task'.
        :END:

******* CANCELLED [spec-uc-uml] Remove user from notification list :CANCELLED:
        CLOSED: [2012-05-05 Sa 16:49] SCHEDULED: <2012-05-04 Fr>
        :LOGBOOK:
        - State "CANCELLED"  from "TODO"       [2012-05-05 Sa 16:49] \\
          use case deleted, is special case of 'search task/ take action on
          selected task'.
        :END:

******* CANCELLED [spec-uc-uml] Add reminder                      :CANCELLED:
        CLOSED: [2012-05-05 Sa 16:49] SCHEDULED: <2012-05-04 Fr>
        :LOGBOOK:
        - State "CANCELLED"  from "TODO"       [2012-05-05 Sa 16:49] \\
          use case deleted, is special case of 'search task/ take action on
          selected task'.
        :END:

******* CANCELLED [spec-uc-uml] Remove reminder                   :CANCELLED:
        CLOSED: [2012-05-05 Sa 16:49] SCHEDULED: <2012-05-04 Fr>
        :LOGBOOK:
        - State "CANCELLED"  from "TODO"       [2012-05-05 Sa 16:49] \\
          use case deleted, is special case of 'search task/ take action on
          selected task'.
        :END:

** DONE iOrg
   CLOSED: [2012-06-01 Fr 21:06]
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2012-06-01 Fr 21:06]
   :END:
*** CANCELED Figure out Sessions
    - State "CANCELED"   from "TODO"       [2012-05-07 Mon 12:30] \\
      not needed, for now we'll just use a simple cookie-based system
**** DONE CANCELED [iorg-req-sessions] Analyse 'connect' (node.js framework)
     CLOSED: [2012-06-03 So 09:18] SCHEDULED: <2012-05-03 Do>
     :LOGBOOK:
     - State "DONE"       from ""           [2012-06-03 So 09:18]
     :END:
     - State "CANCELED"   from "TODO"       [2012-05-07 Mon 12:26] \\
       not part of this project
**** DONE CANCELED [iorg-req-sessions] Analyse 'express' (node.js framework)
     CLOSED: [2012-06-03 So 09:18] SCHEDULED: <2012-05-03 Do>
     :LOGBOOK:
     - State "DONE"       from ""           [2012-06-03 So 09:18]
     :END:
     - State "CANCELED"   from "TODO"       [2012-05-07 Mon 12:26] \\
       not part of this project
*** DONE Figure out object-orientation
    CLOSED: [2012-06-01 Fr 18:34]
    :LOGBOOK:
    - State "DONE"       from "TODO"       [2012-06-01 Fr 18:34]
    :END:
**** DONE [iorg-req-obj-orient] Define (abstract) class/entitiy and object [analogies] in iOrg
     CLOSED: [2012-06-01 Fr 18:34] SCHEDULED: <2012-05-06 So>
     :LOGBOOK:
     - State "DONE"       from "TODO"       [2012-06-01 Fr 18:34]
     :END:
**** DONE [iorg-req-obj-orient] Define inheritence in iOrg
     CLOSED: [2012-06-01 Fr 18:34] SCHEDULED: <2012-05-06 So>
     :LOGBOOK:
     - State "DONE"       from "TODO"       [2012-06-01 Fr 18:34]
     :END:
**** DONE [iorg-req-obj-orient] Define composition in iOrg
     CLOSED: [2012-06-01 Fr 18:34] SCHEDULED: <2012-05-06 So>
     :LOGBOOK:
     - State "DONE"       from "TODO"       [2012-06-01 Fr 18:34]
     :END:
**** DONE [iorg-req-obj-orient] Try class/entitiy prototype
     CLOSED: [2012-06-01 Fr 18:34] SCHEDULED: <2012-05-07 Mo>--<2012-05-09 Mi>
     :LOGBOOK:
     - State "DONE"       from "TODO"       [2012-06-01 Fr 18:34]
     :END:

* Community bonding [madrid]  <2012-05-10 Do>--<2012-05-20 So>
** DONE Bugpile Requirements Analysis
   CLOSED: [2012-06-01 Fr 21:05]
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2012-06-01 Fr 21:05]
   :END:
*** DONE Use Cases in textual form
    CLOSED: [2012-06-01 Fr 18:39]
    :LOGBOOK:
    - State "DONE"       from "TODO"       [2012-06-01 Fr 18:39]
    :END:

**** DONE [req-uc-txt] Create project
     CLOSED: [2012-05-21 Mo 14:46] SCHEDULED: <2012-05-10 Do>
     :LOGBOOK:
     - State "DONE"       from "TODO"       [2012-05-21 Mo 14:46]
     :END:

**** DONE [req-uc-txt] Delete project
     CLOSED: [2012-05-21 Mo 15:07] SCHEDULED: <2012-05-10 Do>
     :LOGBOOK:
     - State "DONE"       from "TODO"       [2012-05-21 Mo 15:07]
     :END:

**** DONE [req-uc-txt] Switch project
     CLOSED: [2012-05-21 Mo 15:12] SCHEDULED: <2012-05-10 Do>
     :LOGBOOK:
     - State "DONE"       from "TODO"       [2012-05-21 Mo 15:12]
     :END:

**** DONE [req-uc-txt] Open new task
     CLOSED: [2012-05-10 Do 11:21] SCHEDULED: <2012-05-11 Fr>
     :LOGBOOK:
     - State "DONE"       from "TODO"       [2012-05-10 Do 11:21]
     :END:

**** DONE [req-uc-txt] Re-open task
     CLOSED: [2012-05-21 Mo 22:28] SCHEDULED: <2012-05-11 Fr>
     :LOGBOOK:
     - State "DONE"       from "TODO"       [2012-05-21 Mo 22:28]
     :END:

**** DONE [req-uc-txt] Edit task
     CLOSED: [2012-05-21 Mo 22:28] SCHEDULED: <2012-05-11 Fr>
     :LOGBOOK:
     - State "DONE"       from "TODO"       [2012-05-21 Mo 22:28]
     :END:

**** DONE [req-uc-txt] Close task
     CLOSED: [2012-05-21 Mo 22:28] SCHEDULED: <2012-05-11 Fr>
     :LOGBOOK:
     - State "DONE"       from "TODO"       [2012-05-21 Mo 22:28]
     :END:

**** DONE [req-uc-txt] Add related task
     CLOSED: [2012-05-21 Mo 22:28] SCHEDULED: <2012-05-11 Fr>
     :LOGBOOK:
     - State "DONE"       from "TODO"       [2012-05-21 Mo 22:28]
     :END:

**** DONE [req-uc-txt] Remove related task
     CLOSED: [2012-05-21 Mo 22:28] SCHEDULED: <2012-05-11 Fr>
     :LOGBOOK:
     - State "DONE"       from "TODO"       [2012-05-21 Mo 22:28]
     :END:

**** DONE [req-uc-txt] Assign task
     CLOSED: [2012-05-21 Mo 22:28] SCHEDULED: <2012-05-11 Fr>
     :LOGBOOK:
     - State "DONE"       from "TODO"       [2012-05-21 Mo 22:28]
     :END:

**** DONE [req-uc-txt] Add comment
     CLOSED: [2012-05-21 Mo 22:25] SCHEDULED: <2012-05-10 Do>
     :LOGBOOK:
     - State "DONE"       from "TODO"       [2012-05-21 Mo 22:25]
     :END:

**** DONE [req-uc-txt] Edit comment
     CLOSED: [2012-05-21 Mo 22:25] SCHEDULED: <2012-05-10 Do>
     :LOGBOOK:
     - State "DONE"       from "TODO"       [2012-05-21 Mo 22:25]
     :END:

**** CANCELLED [req-uc-txt] Delete comment                        :CANCELLED:
     CLOSED: [2012-05-21 Mo 22:25] SCHEDULED: <2012-05-10 Do>
     :LOGBOOK:
     - State "CANCELLED"  from "TODO"       [2012-05-21 Mo 22:25] \\
       merged with other use case
     :END:

**** DONE [req-uc-txt] Add attachment
     CLOSED: [2012-05-21 Mo 22:26] SCHEDULED: <2012-05-10 Do>
     :LOGBOOK:
     - State "DONE"       from "TODO"       [2012-05-21 Mo 22:26]
     :END:

**** DONE [req-uc-txt] Delete attachment
     CLOSED: [2012-05-21 Mo 22:26] SCHEDULED: <2012-05-10 Do>
     :LOGBOOK:
     - State "DONE"       from "TODO"       [2012-05-21 Mo 22:26]
     :END:

**** CANCELLED [req-uc-txt] Attach a file                         :CANCELLED:
     CLOSED: [2012-05-21 Mo 22:26] SCHEDULED: <2012-05-10 Do>
     :LOGBOOK:
     - State "CANCELLED"  from "TODO"       [2012-05-21 Mo 22:26] \\
       same as add attachment
     :END:

**** DONE [req-uc-txt] Search tasklist
     CLOSED: [2012-05-21 Mo 22:26] SCHEDULED: <2012-05-10 Do>
     :LOGBOOK:
     - State "DONE"       from "TODO"       [2012-05-21 Mo 22:26]
     :END:

**** DONE [req-uc-txt] Take action on selected tasks
     CLOSED: [2012-05-21 Mo 22:27] SCHEDULED: <2012-05-10 Do>
     :LOGBOOK:
     - State "DONE"       from "TODO"       [2012-05-21 Mo 22:27]
     :END:

**** DONE [req-uc-txt] Search event log
     CLOSED: [2012-05-21 Mo 22:27] SCHEDULED: <2012-05-10 Do>
     :LOGBOOK:
     - State "DONE"       from "TODO"       [2012-05-21 Mo 22:27]
     :END:

*** DONE Integrated UML Modelling of Use Cases and UI
    CLOSED: [2012-06-01 Fr 18:39]
    :LOGBOOK:
    - State "DONE"       from "TODO"       [2012-06-01 Fr 18:39]
    :END:

**** DONE [req-uc-uml] Create project
     CLOSED: [2012-05-21 Mo 22:27] SCHEDULED: <2012-05-10 Do>
     :LOGBOOK:
     - State "DONE"       from "TODO"       [2012-05-21 Mo 22:27]
     :END:

**** DONE [req-uc-uml] Delete project
     CLOSED: [2012-05-21 Mo 22:27] SCHEDULED: <2012-05-10 Do>
     :LOGBOOK:
     - State "DONE"       from "TODO"       [2012-05-21 Mo 22:27]
     :END:

**** DONE [req-uc-uml] Switch project
     CLOSED: [2012-05-21 Mo 22:27] SCHEDULED: <2012-05-10 Do>
     :LOGBOOK:
     - State "DONE"       from "TODO"       [2012-05-21 Mo 22:27]
     :END:

**** DONE [req-uc-uml] Open new task
     CLOSED: [2012-05-10 Do 11:21] SCHEDULED: <2012-05-11 Fr>
     :LOGBOOK:
     :END:

**** DONE [req-uc-uml] Re-open task
     CLOSED: [2012-05-22 Di 12:59] SCHEDULED: <2012-05-11 Fr>
     :LOGBOOK:
     - State "DONE"       from "TODO"       [2012-05-22 Di 12:59]
     :END:

**** DONE [req-uc-uml] Edit task
     CLOSED: [2012-05-22 Di 12:59] SCHEDULED: <2012-05-11 Fr>
     :LOGBOOK:
     - State "DONE"       from "TODO"       [2012-05-22 Di 12:59]
     :END:

**** DONE [req-uc-uml] Close task
     CLOSED: [2012-05-22 Di 12:59] SCHEDULED: <2012-05-11 Fr>
     :LOGBOOK:
     - State "DONE"       from "TODO"       [2012-05-22 Di 12:59]
     :END:

**** DONE [req-uc-uml] Add related task
     CLOSED: [2012-05-22 Di 12:59] SCHEDULED: <2012-05-11 Fr>
     :LOGBOOK:
     - State "DONE"       from "TODO"       [2012-05-22 Di 12:59]
     :END:

**** DONE [req-uc-uml] Remove related task
     CLOSED: [2012-05-22 Di 12:59] SCHEDULED: <2012-05-11 Fr>
     :LOGBOOK:
     - State "DONE"       from "TODO"       [2012-05-22 Di 12:59]
     :END:

**** DONE [req-uc-uml] Assign task
     CLOSED: [2012-05-22 Di 12:59] SCHEDULED: <2012-05-11 Fr>
     :LOGBOOK:
     - State "DONE"       from "TODO"       [2012-05-22 Di 12:59]
     :END:

**** DONE [req-uc-uml] Add comment
     CLOSED: [2012-05-21 Mo 22:27] SCHEDULED: <2012-05-10 Do>
     :LOGBOOK:
     - State "DONE"       from "TODO"       [2012-05-21 Mo 22:27]
     :END:

**** DONE [req-uc-uml] Edit comment
     CLOSED: [2012-05-21 Mo 22:27] SCHEDULED: <2012-05-10 Do>
     :LOGBOOK:
     - State "DONE"       from "TODO"       [2012-05-21 Mo 22:27]
     :END:

**** CANCELLED [req-uc-uml] Delete comment                        :CANCELLED:
     CLOSED: [2012-05-21 Mo 22:27] SCHEDULED: <2012-05-10 Do>
     :LOGBOOK:
     - State "CANCELLED"  from "TODO"       [2012-05-21 Mo 22:27] \\
       merged with edit comment
     :END:

**** DONE [req-uc-uml] Add attachment
     CLOSED: [2012-05-21 Mo 22:28] SCHEDULED: <2012-05-10 Do>
     :LOGBOOK:
     - State "DONE"       from "TODO"       [2012-05-21 Mo 22:28]
     :END:

**** DONE [req-uc-uml] Delete attachment
     CLOSED: [2012-05-22 Di 12:58] SCHEDULED: <2012-05-10 Do>
     :LOGBOOK:
     - State "DONE"       from "TODO"       [2012-05-22 Di 12:58]
     :END:

**** DONE [req-uc-uml] Attach a file
     CLOSED: [2012-05-22 Di 12:58] SCHEDULED: <2012-05-10 Do>
     :LOGBOOK:
     - State "DONE"       from "TODO"       [2012-05-22 Di 12:58]
     :END:

**** DONE [req-uc-uml] Search tasklist
     CLOSED: [2012-05-22 Di 12:58] SCHEDULED: <2012-05-10 Do>
     :LOGBOOK:
     - State "DONE"       from "TODO"       [2012-05-22 Di 12:58]
     :END:

**** DONE [req-uc-uml] Take action on selected tasks
     CLOSED: [2012-05-22 Di 12:58] SCHEDULED: <2012-05-10 Do>
     :LOGBOOK:
     - State "DONE"       from "TODO"       [2012-05-22 Di 12:58]
     :END:

**** DONE [req-uc-uml] Search event log
     CLOSED: [2012-05-22 Di 12:59] SCHEDULED: <2012-05-10 Do>
     :LOGBOOK:
     - State "DONE"       from "TODO"       [2012-05-22 Di 12:59]
     :END:

*** CANCELLED System Activities                                   :CANCELLED:
    CLOSED: [2012-06-01 Fr 21:32]
    :LOGBOOK:
    - State "CANCELLED"  from "TODO"       [2012-06-01 Fr 21:32] \\
      obsolete
    :END:
**** CANCELLED [req-syst-act-uml] Search                          :CANCELLED:
     CLOSED: [2012-06-01 Fr 21:32] SCHEDULED: <2012-05-12 Sa>
     :LOGBOOK:
     - State "CANCELLED"  from "TODO"       [2012-06-01 Fr 21:32] \\
       obsolete
     :END:
**** CANCELLED [req-syst-act-uml] Report                          :CANCELLED:
     CLOSED: [2012-06-01 Fr 21:32] SCHEDULED: <2012-05-12 Sa>
     :LOGBOOK:
     - State "CANCELLED"  from "TODO"       [2012-06-01 Fr 21:32] \\
       obsolete
     :END:
**** CANCELLED [req-syst-act-uml] Notificate                      :CANCELLED:
     CLOSED: [2012-06-01 Fr 21:32] SCHEDULED: <2012-05-12 Sa>
     :LOGBOOK:
     - State "CANCELLED"  from "TODO"       [2012-06-01 Fr 21:32] \\
       obsolete
     :END:
**** CANCELLED [req-syst-act-uml] Remind                          :CANCELLED:
     CLOSED: [2012-06-01 Fr 21:31] SCHEDULED: <2012-05-12 Sa>
     :LOGBOOK:
     - State "CANCELLED"  from "TODO"       [2012-06-01 Fr 21:31] \\
       obsolete
     :END:

*** DONE Use Case Models
    CLOSED: [2012-06-01 Fr 18:39]
    :LOGBOOK:
    - State "DONE"       from "TODO"       [2012-06-01 Fr 18:39]
    :END:

**** DONE [req-uc-mod] User management
     CLOSED: [2012-05-22 Di 12:59] SCHEDULED: <2012-05-12 Sa>
     :LOGBOOK:
     - State "DONE"       from "TODO"       [2012-05-22 Di 12:59]
     :END:
**** DONE [req-uc-mod] Task management
     CLOSED: [2012-05-23 Mi 14:03] SCHEDULED: <2012-05-12 Sa>
     :LOGBOOK:
     - State "DONE"       from "TODO"       [2012-05-23 Mi 14:03]
     :END:

** DONE Bugpile Software Specification
   CLOSED: [2012-06-01 Fr 20:44]
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2012-06-01 Fr 20:44]
   :END:
*** DONE Transforming Requirements into Specifications
    CLOSED: [2012-06-01 Fr 20:44]
    :LOGBOOK:
    - State "DONE"       from "TODO"       [2012-06-01 Fr 20:44]
    :END:
**** DONE Integrated UML Modelling of Use Cases and UI
     CLOSED: [2012-06-01 Fr 18:40]
     :LOGBOOK:
     - State "DONE"       from "TODO"       [2012-06-01 Fr 18:40]
     :END:
***** CANCELLED [spec-syst-act-uml] Search                        :CANCELLED:
      CLOSED: [2012-06-01 Fr 21:11] SCHEDULED: <2012-05-14 Mo>
      :LOGBOOK:
      - State "CANCELLED"  from "TODO"       [2012-06-01 Fr 21:11] \\
        obsolete
      :END:
***** CANCELLED [spec-syst-act-uml] Report                        :CANCELLED:
      CLOSED: [2012-06-01 Fr 21:12] SCHEDULED: <2012-05-14 Mo>
      :LOGBOOK:
      - State "CANCELLED"  from "TODO"       [2012-06-01 Fr 21:12] \\
        obsolete
      :END:
***** CANCELLED [spec-syst-act-uml] Notificate                    :CANCELLED:
      CLOSED: [2012-06-01 Fr 21:12] SCHEDULED: <2012-05-14 Mo>
      :LOGBOOK:
      - State "CANCELLED"  from "TODO"       [2012-06-01 Fr 21:12] \\
        obsolete
      :END:
***** CANCELLED [spec-syst-act-uml] Remind                        :CANCELLED:
      CLOSED: [2012-06-01 Fr 21:12] SCHEDULED: <2012-05-14 Mo>
      :LOGBOOK:
      - State "CANCELLED"  from "TODO"       [2012-06-01 Fr 21:12] \\
        obsolete
      :END:

***** DONE [spec-uc-uml] Create project
      CLOSED: [2012-05-22 Di 15:26] SCHEDULED: <2012-05-13 So>
      :LOGBOOK:
      - State "DONE"       from "TODO"       [2012-05-22 Di 15:26]
      :END:

***** DONE [spec-uc-uml] Delete project
      CLOSED: [2012-05-22 Di 15:26] SCHEDULED: <2012-05-13 So>
      :LOGBOOK:
      - State "DONE"       from "TODO"       [2012-05-22 Di 15:26]
      :END:

***** DONE [spec-uc-uml] Switch project
      CLOSED: [2012-05-22 Di 15:26] SCHEDULED: <2012-05-13 So>
      :LOGBOOK:
      - State "DONE"       from "TODO"       [2012-05-22 Di 15:26]
      :END:

***** DONE [spec-uc-uml] Open new task
      CLOSED: [2012-05-22 Di 15:26] SCHEDULED: <2012-05-13 So>
      :LOGBOOK:
      - State "DONE"       from "TODO"       [2012-05-22 Di 15:26]
      :END:

***** DONE [spec-uc-uml] Re-open task
      CLOSED: [2012-05-22 Di 15:26] SCHEDULED: <2012-05-13 So>
      :LOGBOOK:
      - State "DONE"       from "TODO"       [2012-05-22 Di 15:26]
      :END:

***** DONE [spec-uc-uml] Edit task
      CLOSED: [2012-05-22 Di 15:26] SCHEDULED: <2012-05-13 So>
      :LOGBOOK:
      - State "DONE"       from "TODO"       [2012-05-22 Di 15:26]
      :END:

***** DONE [spec-uc-uml] Close task
      CLOSED: [2012-05-22 Di 15:26] SCHEDULED: <2012-05-13 So>
      :LOGBOOK:
      - State "DONE"       from "DONE"       [2012-05-22 Di 15:26]
      - State "DONE"       from "TODO"       [2012-05-22 Di 15:26]
      :END:

***** DONE [spec-uc-uml] Add related task
      CLOSED: [2012-05-22 Di 15:26] SCHEDULED: <2012-05-13 So>
      :LOGBOOK:
      - State "DONE"       from "TODO"       [2012-05-22 Di 15:26]
      :END:

***** DONE [spec-uc-uml] Remove related task
      CLOSED: [2012-05-22 Di 15:26] SCHEDULED: <2012-05-13 So>
      :LOGBOOK:
      - State "DONE"       from "TODO"       [2012-05-22 Di 15:26]
      :END:

***** DONE [spec-uc-uml] Assign task
      CLOSED: [2012-05-22 Di 15:26] SCHEDULED: <2012-05-13 So>
      :LOGBOOK:
      - State "DONE"       from "TODO"       [2012-05-22 Di 15:26]
      :END:

***** DONE [spec-uc-uml] Add comment
      CLOSED: [2012-05-22 Di 15:26] SCHEDULED: <2012-05-13 So>
      :LOGBOOK:
      - State "DONE"       from "TODO"       [2012-05-22 Di 15:26]
      :END:

***** DONE [spec-uc-uml] Edit comment
      CLOSED: [2012-05-22 Di 15:26] SCHEDULED: <2012-05-13 So>
      :LOGBOOK:
      - State "DONE"       from "TODO"       [2012-05-22 Di 15:26]
      :END:

***** DONE [spec-uc-uml] Delete comment
      CLOSED: [2012-05-22 Di 15:26] SCHEDULED: <2012-05-13 So>
      :LOGBOOK:
      - State "DONE"       from "TODO"       [2012-05-22 Di 15:26]
      :END:

***** DONE [spec-uc-uml] Add attachment
      CLOSED: [2012-05-22 Di 15:26] SCHEDULED: <2012-05-13 So>
      :LOGBOOK:
      - State "DONE"       from "TODO"       [2012-05-22 Di 15:26]
      :END:

***** DONE [spec-uc-uml] Delete attachment
      CLOSED: [2012-05-22 Di 15:26] SCHEDULED: <2012-05-13 So>
      :LOGBOOK:
      - State "DONE"       from "TODO"       [2012-05-22 Di 15:26]
      :END:

***** DONE [spec-uc-uml] Attach a file
      CLOSED: [2012-05-22 Di 15:26] SCHEDULED: <2012-05-13 So>
      :LOGBOOK:
      - State "DONE"       from "TODO"       [2012-05-22 Di 15:26]
      :END:

***** DONE [spec-uc-uml] Search tasklist
      CLOSED: [2012-05-22 Di 15:26] SCHEDULED: <2012-05-13 So>
      :LOGBOOK:
      - State "DONE"       from "TODO"       [2012-05-22 Di 15:26]
      :END:

***** DONE [spec-uc-uml] Take action on selected tasks
      CLOSED: [2012-05-22 Di 15:26] SCHEDULED: <2012-05-13 So>
      :LOGBOOK:
      - State "DONE"       from "TODO"       [2012-05-22 Di 15:26]
      :END:

***** DONE [spec-uc-uml] Search event log
      CLOSED: [2012-05-22 Di 15:27] SCHEDULED: <2012-05-13 So>
      :LOGBOOK:
      - State "DONE"       from "TODO"       [2012-05-22 Di 15:27]
      :END:

* Coding [madrid] <2012-05-21 Mo>--<2012-05-30 Mi>
** DONE Bugpile Software Architecture
   CLOSED: [2012-06-01 Fr 19:01]
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2012-06-01 Fr 19:01]
   :END:
*** DONE Modified 5-Layer Architecture
    CLOSED: [2012-06-01 Fr 19:00]
    :LOGBOOK:
    - State "DONE"       from "TODO"       [2012-06-01 Fr 19:00]
    :END:
**** DONE [sw-arch-bp] Textual description
     CLOSED: [2012-06-01 Fr 19:00] SCHEDULED: <2012-05-21 Mo>
     :LOGBOOK:
     - State "DONE"       from "TODO"       [2012-06-01 Fr 19:00]
     :END:
**** DONE [sw-arch-bp] Graphical depiction
     CLOSED: [2012-06-01 Fr 19:00] SCHEDULED: <2012-05-21 Mo>
     :LOGBOOK:
     - State "DONE"       from "TODO"       [2012-06-01 Fr 19:00]
     :END:
** DONE Bugpile Application Design
   CLOSED: [2012-06-01 Fr 20:40]
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2012-06-01 Fr 20:40]
   :END:
*** CANCELLED Figure out Authentication                           :CANCELLED:
    CLOSED: [2012-06-01 Fr 21:41]
    :LOGBOOK:
    - State "CANCELLED"  from "TODO"       [2012-06-01 Fr 21:41] \\
      obsolete or duplicate
    :END:
**** DONE CANCELED [iorg-req-authent] Analyse 'basic http authentication'
     CLOSED: [2012-06-03 So 09:18] SCHEDULED: <2012-05-04 Fr>
     :LOGBOOK:
     - State "DONE"       from ""           [2012-06-03 So 09:18]
     :END:
     - State "CANCELED"   from "TODO"       [2012-05-07 Mon 12:27] \\
       nope, this is not as convenience as cookies
**** DONE CANCELED [iorg-req-authent] Analyse 'OAuth'
     CLOSED: [2012-06-03 So 09:18] SCHEDULED: <2012-05-05 Sa>
     :LOGBOOK:
     - State "DONE"       from ""           [2012-06-03 So 09:18]
     :END:
     - State "CANCELED"   from "TODO"       [2012-05-07 Mon 12:26] \\
       nicferrier is handling this, we can let him do the implementation

*** CANCELLED Refining the Logic                                  :CANCELLED:
     CLOSED: [2012-06-01 Fr 21:17]
     :LOGBOOK:
     - State "CANCELLED"  from "TODO"       [2012-06-01 Fr 21:17] \\
       obsolete
     :END:
***** CANCELLED [design-refine-logic] Complete the worker functions signatures :CANCELLED:
      CLOSED: [2012-06-01 Fr 21:17] SCHEDULED: <2012-05-28 Mo>
      :LOGBOOK:
      - State "CANCELLED"  from "TODO"       [2012-06-01 Fr 21:17] \\
        too detailistic
      :END:
***** CANCELLED [design-refine-logic] Add methods to classes (if necessary). :CANCELLED:
      CLOSED: [2012-06-01 Fr 21:15] SCHEDULED: <2012-05-29 Di>
      :LOGBOOK:
      - State "CANCELLED"  from "TODO"       [2012-06-01 Fr 21:15] \\
        obsolete - classes are pure persistence and storage entities, they do
        not have methods. org-mode functionality is used (and maybe extendet)
        to work with classes.
      :END:
***** CANCELLED [design-refine-logic] Write uml interaction models (if necesary) :CANCELLED:
      CLOSED: [2012-06-01 Fr 21:14] SCHEDULED: <2012-05-30 Mi>
      :LOGBOOK:
      - State "CANCELLED"  from "TODO"       [2012-06-01 Fr 21:14] \\
        too much uml
      :END:
***** CANCELLED [design-refine-logic] Decide about asynchrous beans :CANCELLED:
      CLOSED: [2012-06-01 Fr 18:46] SCHEDULED: <2012-05-30 Mi>
      :LOGBOOK:
      - State "CANCELLED"  from "TODO"       [2012-06-01 Fr 18:46] \\
        elnode enables asynchronous processing anyway
      :END:

*** DONE Class Model of Application Design
     CLOSED: [2012-06-01 Fr 18:44]
     :LOGBOOK:
     - State "DONE"       from "TODO"       [2012-06-01 Fr 18:44]
     :END:
***** DONE [design-class-model] Adapt the domain class model
      CLOSED: [2012-06-01 Fr 18:44] SCHEDULED: <2012-05-21 Mo>
      :LOGBOOK:
      - State "DONE"       from "TODO"       [2012-06-01 Fr 18:44]
      :END:
***** DONE [design-class-model] Transform uml scenes into =views=
      CLOSED: [2012-06-01 Fr 18:43] SCHEDULED: <2012-05-22 Di>--<2012-05-23 Mi>
      :LOGBOOK:
      - State "DONE"       from "TODO"       [2012-06-01 Fr 18:43]
      :END:
***** DONE [design-class-model] Transform uml activities  into =actions=
      CLOSED: [2012-06-01 Fr 18:43] SCHEDULED: <2012-05-24 Do>--<2012-05-25 Fr>
      :LOGBOOK:
      - State "DONE"       from "TODO"       [2012-06-01 Fr 18:43]
      :END:
***** DONE [design-class-model] Transform uml system actions into =beans=
      CLOSED: [2012-06-01 Fr 18:43] SCHEDULED: <2012-05-26 Sa>--<2012-05-27 So>
      :LOGBOOK:
      - State "DONE"       from "TODO"       [2012-06-01 Fr 18:43]
      :END:

** DONE iOrg
   CLOSED: [2012-06-01 Fr 18:49]
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2012-06-01 Fr 18:49]
   :END:
*** CANCELLED Sessions                                            :CANCELLED:
    CLOSED: [2012-06-01 Fr 18:48]
    :LOGBOOK:
    - State "CANCELLED"  from "TODO"       [2012-06-01 Fr 18:48] \\
      not part of this project
    :END:
**** CANCELLED [iorg-impl-sessions] (partially) Implement 'connect' (node.js) :CANCELLED:
     CLOSED: [2012-06-01 Fr 18:48] SCHEDULED: <2012-05-21 Mo>--<2012-05-30 Mi>
     :LOGBOOK:
     - State "CANCELLED"  from "TODO"       [2012-06-01 Fr 18:48] \\
       not part of this project
     :END:
**** CANCELLED [iorg-impl-sessions] (partially) Implement 'express' (node.js) :CANCELLED:
     CLOSED: [2012-06-01 Fr 18:47] SCHEDULED: <2012-05-21 Mo>--<2012-05-30 Mi>
     :LOGBOOK:
     - State "CANCELLED"  from "TODO"       [2012-06-01 Fr 18:47] \\
       not part of this project
     :END:
*** DONE Classes/Entities
    CLOSED: [2012-06-01 Fr 18:47]
    :LOGBOOK:
    - State "DONE"       from "TODO"       [2012-06-01 Fr 18:47]
    :END:
**** DONE [iorg-design-persist] Design persistence system
     CLOSED: [2012-06-01 Fr 18:47] SCHEDULED: <2012-05-21 Mo>--<2012-05-30 Mi>
     :LOGBOOK:
     - State "DONE"       from "TODO"       [2012-06-01 Fr 18:47]
     :END:

* Coding [berlin] <2012-05-31 Do>--<2012-07-08 So>
** Bugpile Implementation
Moved to [[#tasks][Tasks]].

** Bugpile Design
*** Design Bugreport
**** create bug report

**** change meta-data of bug report
meta-data could include
- type
  - bug
  - feature request
  - refactoring
- state
  - unconfirmed
  - confirmed
  - open
  - close
  - assigned
  - superseded
  - etc...
- priority
  - low
  - medium
  - high
  - breaking
  - etc...

**** change text of bug report
This would be the actual textual notes, which would presumably live in
the body of an Org-mode headline.

**** associate bug report with commit in version control repository

*** Domain Class Model
**** NEXT [req-dom-class-mod-uml] Class Model of Requirements Analysis

*** iOrg Authentication
I think Nic Ferrier is working on an authentication system for elnode,
so hopefully if we save this until the end of the summer he will do
all of the heavy lifting for us.  For that reason I'm removing the
TODO from this headline for now.

***** [iorg-req-authent] Try authentication prototype
This should be a simple cookie system.  For now we can just keep a
server-side list of usernames and passwords.  The authentication
process will be as follows.

1. user sends username and password to the server.  For now we warn
   users not to user sensitive passwords, as they'll be transferred
   and stored in plain text.  These limitations are easily fixed later
   by running elnode behind an apache https server, and storing only
   hashes of passwords locally

2. server checks that username and password are in the system,
   generates a cookie which is associated with the user and sent to
   the client

3. client stores the cookie, and includes it in all future connections
   to the system

***** [iorg-impl-auth] Implement basic authentication
***** [iorg-impl-auth] Implement OAuth authentication
*** Application Design
**** polish design
**** finish (programmatical) transformations
* Evaluating (mid-term) [berlin] <2012-07-09 Mo>--<2012-07-13 Fr>
** GSoC mid-term evalution 
* Coding [berlin] <2012-07-14 Sa>--<2012-08-12 So>
** Bugpile Implementation
** Bugpile Verification
* Cleaning up [berlin] <2012-08-13 Mo>--<2012-08-19 So>
** Clean code
** Clean documentation
* Evaluating (final) [berlin] <2012-08-20 Mo>--<2012-08-24 Fr>
** GSoC Final evaluation
