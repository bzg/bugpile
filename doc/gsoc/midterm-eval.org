#+Title: Test-Recipe for Bugpile/iOrg Prototpe 

* Setup
** Clone repo
git clone bugpile@orgmode.org:bugpile.git
** Load sources
1. evaluate
#+begin_src emacs-lisp
  ;; TODO adapt path to your settings
  (add-to-list 'load-path "/home/tj/git/bugpile/iorg/lisp/")
#+end_src

2. C-x d "/bugpile/controller/" # dired

3. L on bugpile-controller.el  # load file
loads all other iOrg source files. 

** Customize settings
M-x customize-variable RET iorg-projects-config
adapt the path of :dir in project "bugpile" to your settings

* Make class and objects (test logic)
** object
The abstract 'object' class is already included in the repo, only
action required: visit it in /bugpile/objects/classes/ and add an
global ID with org-id-get-create.
*** html 
The abstract 'html' class is already included in the repo, only
action required: visit it in /bugpile/objects/classes/ and add an
global ID with org-id-get-create.
**** task
1. goto /bugpile/iorg/lisp/iorg-logic.el
2. read docstring of function iorg-logic-new-class
3. evaluate

#+begin_src emacs-lisp
  (iorg-logic-new-class "bugpile" "task" nil '(:tags "abstact")
   '(:iorg-super . "html") '(:object-foo . "task") '(:object-foo_ALL-C
   . "task") '(:task-author . "") '(:task-priority_ALL-C . "urgent\
   high medium low") '(:task-closed . "") '(:task-opened . "")
   '(:task-reopened . "") '(:task-assigned-to . "")
   '(:task-project_ALL-C . "org babel agenda exporter iorg")
   '(:task-project . ""))
#+end_src

find the class in /bugpile/objects/classes/, it should look like this:

#+begin_src org
#+Title: The class definition for 'task'

* TODO task                                                         :abstact:
  :PROPERTIES:
  :ID:       a37f5d12-dc2b-41db-b4eb-69e10832f56b
  :iorg-super: html
  :object-foo: task
  :object-foo_ALL-C: task
  :task-author: 
  :task-priority_ALL-C: urgent high medium low
  :task-closed: 
  :task-opened: 
  :task-reopened: 
  :task-assigned-to: 
  :task-project_ALL-C: org babel agenda exporter iorg
  :task-project: 
  :END:
#+end_src

***** bug
evaluate

#+begin_src emacs-lisp
  (iorg-logic-new-class "bugpile" "bug" 'todo '(:tags "foo" "bar")
   '(:iorg-super . "task") '(:object-foo . "bug")
   '(:object-foo_ALL-C . "bug") '(:bug-is-upstream_ALL-C . "yes no\
   maybe") '(:bug-is-upstream . "no") '(:bug-need-skills_ALL-C
   . "beginner intermediate advanced unknown") '(:bug-need-skills
   . "intermediate"))
#+end_src

find the class in /bugpile/objects/classes/, it should look like this:

#+begin_src org
#+Title: The class definition for 'bug'

* TODO bug                                                          :foo:bar:
  :PROPERTIES:
  :ID:       72127249-c3a2-4a71-a35d-b1ef00cbfb25
  :iorg-super: task
  :object-foo: bug
  :object-foo_ALL-C: bug
  :bug-is-upstream_ALL-C: yes no maybe
  :bug-is-upstream: no
  :bug-need-skills_ALL-C: beginner intermediate advanced unknown
  :bug-need-skills: intermediate
  :END:
#+end_src

***** feature
evaluate

#+begin_src emacs-lisp
  (iorg-logic-new-class "bugpile" "feature" 'todo
   '(:tags "kung" "fu") '(:iorg-super . "task") '(:object-foo
   . "feature") '(:object-foo_ALL-C . "feature")
   '(:feature-category_ALL-C . "must-nave nice-to-have\
   may-be-once") '(:feature-category . "nice-to-have")
   '(:task-priority . "low"))
#+end_src

find the class in /bugpile/objects/classes/, it should look similar to
this:

#+begin_src org
#+Title: The class definition for 'feature'

* TODO feature                                                      :kung:fu:
  :PROPERTIES:
  :ID:       e0909298-8319-49d8-b7cf-8f0c588044d1
  :iorg-super: task
  :object-foo: feature
  :object-foo_ALL-C: feature
  :feature-category_ALL-C: must-nave nice-to-have may-be-once
  :feature-category: nice-to-have
  :task-priority: low
  :END:
#+end_src

* Construct some objects by hand
1. goto /bugpile/iorg/lisp/iorg-logic.el
2. read docstring of function iorg-logic-new-object
3. do 2 times each:
M-x iorg-logic-new-object RET bugpile RET bug
M-x iorg-logic-new-object RET bugpile RET feature

and have a look at the objects-file in /bugpile/objects/ after each
time to see how the objects are added to the file. [very slow -
probably not a good idea to use recursion in a central place like
iorg-logic--get-entry-properties-with-class-inheritance?].

The files should look like this. Notice how values accumulated in
':object-foo: bug task html obj' and ':object-foo_ALL: bug task html
obj'.

BUG
#+begin_src org
#+Title: The objects file for class 'bug'

* TODO bug                                                          :foo:bar:
  :PROPERTIES:
  :object-foo: bug task html obj
  :html-headline-forms: notext
  :html-edit: link
  :html-edit-value: Edit
  :html-send-button: Send
  :html-reset-button: Reset
  :task-author: 
  :task-closed: 
  :task-opened: 
  :task-reopened: 
  :task-assigned-to: 
  :task-project: 
  :bug-is-upstream: no
  :bug-need-skills: intermediate
  :ID:       ed9f0621-f636-48cb-bb5f-8a639cfc35a5
  :END:


* TODO bug                                                          :foo:bar:
  :PROPERTIES:
  :object-foo: bug task html obj
  :html-headline-forms: notext
  :html-edit: link
  :html-edit-value: Edit
  :html-send-button: Send
  :html-reset-button: Reset
  :task-author: 
  :task-closed: 
  :task-opened: 
  :task-reopened: 
  :task-assigned-to: 
  :task-project: 
  :bug-is-upstream: no
  :bug-need-skills: intermediate
  :ID:       71a96342-3bcc-42b1-8c03-ce1e2959c374
  :END:


* File Local Variables (iOrg class properties)              :file_local_vars:
# Local Variables:
# object-foo_ALL: "bug task html obj"
# html-edit_ALL: "link button"
# html-headline_forms_ALL: "all notext todo text tag"
# html-index-action: "nil"
# html-edit-action: "nil"
# html-send-action: "nil"
# html-reset-action: "nil"
# task-priority_ALL: "urgent high medium low"
# task-project_ALL: "org babel agenda exporter iorg"
# bug-is-upstream_ALL: "yes no maybe"
# bug-need-skills_ALL: "beginner intermediate advanced unknown"
# End:
#+end_src

FEATURE
#+begin_src org
#+Title: The objects file for class 'feature'

* TODO feature                                                      :kung:fu:
  :PROPERTIES:
  :object-foo: feature task html obj
  :html-headline-forms: notext
  :html-edit: link
  :html-edit-value: Edit
  :html-send-button: Send
  :html-reset-button: Reset
  :task-author: 
  :task-closed: 
  :task-opened: 
  :task-reopened: 
  :task-assigned-to: 
  :task-project: 
  :feature-category: nice-to-have
  :task-priority: low
  :ID:       a30e39b2-1e13-427d-b8c9-f1a86ee11703
  :END:

* TODO feature                                                      :kung:fu:
  :PROPERTIES:
  :object-foo: feature task html obj
  :html-headline-forms: notext
  :html-edit: link
  :html-edit-value: Edit
  :html-send-button: Send
  :html-reset-button: Reset
  :task-author: 
  :task-closed: 
  :Task-opened: 
  :task-reopened: 
  :task-assigned-to: 
  :task-project: 
  :feature-category: nice-to-have
  :task-priority: low
  :ID:       5e46a165-bb09-41c7-bee8-f129445ab47f
  :END:

* File Local Variables (iOrg class properties)              :file_local_vars:
# Local Variables:
# object-foo_ALL: "feature task html obj"
# html-edit_ALL: "link button"
# html-headline_forms_ALL: "all notext todo text tag"
# html-index-action: "nil"
# html-edit-action: "nil"
# html-send-action: "nil"
# html-reset-action: "nil"
# task-priority_ALL: "urgent high medium low"
# task-project_ALL: "org babel agenda exporter iorg"
# feature-category_ALL: "must-nave nice-to-have may-be-once"
# End:
#+end_src


* Start elnode servers (test controller and logic)
Since I could not achieve that the same elnode server serves the
static html files from projects docroot and the users interactive http
requests (doesn't make no sense anyway?), launching an iOrg project
now starts 2 elnode servers, one for each task. Hosts and ports are
customizable in 'iorg-projects-config'. 

** launch bugpile
1. goto iorg-controller-launch-project in
   /bugpile/iorg/lisp/iorg-controller.el and read the docstring.
2. (optional) goto iorg-projects-config' in
   /bugpile/iorg/lisp/iorg-projects/iorg-projects.el and check the
   host/port configuration for bugpile project and docroot. You can
   customize this variable too. 
3. M-x iorg-controller-launch-project RET bugpile
4. open http://localhost:8009 in a browser to see the automatic index
   of bugpiles docroot (and witness an elnode bug - the files in the
   docroot are not served). Note that .org files in docroot are
   automatic exported to html, and reexported, when newer than html
   files. 
5. open http://localhost:8008 in a browser to see the index.html page
   of the bugpile project.
6. M-x iorg-controller-stop-project-servers RET bugpile to stop both
   servers. 
7. goto 3. and start the servers again. if that doesn't really work -
   is that a bug (of elnode?)? or is it that _Emacs_ as a server has to
   be _restarted_ to get rid of code loaded during the first launch?

** play with bugpile
after re-launch (and most likely restart of Emacs), try the following:
*** search tasklist (rudimentary functionality)
1. evaluate

#+begin_src emacs-lisp
(setq org-columns-default-format
 "%40ITEM(Task) %TODO %object-foo %html-edit %TAGS")
#+end_src

#+results:
: %40ITEM(Task) %TODO %object-foo %html-edit %TAGS

2. delete the ID in /bugpile/objects/iorg-dblock-collect.org and
create a new one on you machine with org-id-get-create

3. use this new ID in the header of the dynamic block in file
bugpile-view-take-action-on-selected-tasks.org in the /bugpile/view/
directory.
4. update the dblock with org-dblock-update
5. open http://localhost:8008 in a browser again and follow first the
   'search tasklist' and then 'result list' links.
*** edit task (more or less)
1. From the index page or from the take-action-on-selected-task
   follow link 'show-task'. 
2. copy this example bug into your /bugpile/objects/bug-obj.org file.
   again, you might need to re-produce the ID and copy and paste the
   new one into the :id header argument of the dblocks in
   /bugpile/view/bugpile-view-show-task.org and
   /bugpile/view/bugpile-view-edit-task.org.


#+begin_src org
* TODO bug                                                          :foo:bar:
  :PROPERTIES:
  :COLUMNS:  %40ITEM(Task) %TODO %task-author %task-opened %task-project %bug-need-skills %TAGS
  :object-foo: bug task html obj
  :html-form: iorg-controller-edit-handler
  :html-button-value: submit
  :task-author: tj
  :task-closed: nil
  :task-opened: 09-07-2012
  :task-reopened: nil
  :task-assigned-to: nil
  :task-project: org-agenda
  :bug-is-upstream: no
  :bug-need-skills: intermediate
  :ID:       2f822a1e-4bb4-43be-bec4-b0c5caaa42a5
  :END:

Trying to change the agenda-file-list leads to problems. First, there
is an error message like 'file list can't be a single directory', but
it can. Second, the old directory and the new directory for the
agenda-files are concatenated to an unvalid directory (instead of the
new replacing the old).

But this may not be a bug, because there might be some undetected
configuration conflict somewhere that causes the misbehaviour.  
#+end_src




 
     
   
   
 

