#+OPTIONS:    H:4 num:nil toc:3 \n:nil @:t ::t |:t ^:{} -:t f:t *:t TeX:t LaTeX:t skip:nil d:(HIDE) tags:not-in-toc
#+STARTUP:    align fold nodlcheck oddeven lognotestate hideblocks
#+SEQ_TODO:   TODO(t) INPROGRESS(i) WAITING(w@) | DONE(d) CANCELED(c@)
#+TAGS:       Write(w) Update(u) Fix(f) Check(c) noexport(n)
#+TITLE:      Bugpile - Guidelines for Bugreporting
#+AUTHOR:     Thorsten Jolitz
#+EMAIL:      tj[at]data-driven[dot]de
#+LANGUAGE:   en
#+STYLE:      <style type="text/css">#outline-container-introduction{ clear:both; }</style>
#+LINK_UP:    index.html
#+LINK_HOME:  http://orgmode.org/worg/
#+EXPORT_EXCLUDE_TAGS: noexport

# #+name: banner
# #+begin_html
#   <div id="subtitle" style="float: center; text-align: center;">
#   <p>
#   A Web-Framework based on <a href="http://orgmode.org/">Org-mode</a> and
#                                 <a href="http://picolisp.com/5000/!wiki?home/">PicoLisp</a>
#   </p>
#   <p>
#   <a href="http://picolisp.com/5000/!wiki?home/">
#   <img src="http://picolisp.com/5000/wiki/logo.png"/>
#   </a>
#   </p>
#   </div>
# #+end_html

/About Bugtrackers and good Bugreporting/

* About Bugtrackers

** Why bugtrackers matter

The following quote from Joel Spolsky emphases the importance of
bugtrackers for good software development:

#+begin_quote
    Do you have a bug database?
    
    I don't care what you say. If you are developing code, even on a team
    of one, without an organized database listing all known bugs in the
    code, you are going to ship low quality code. Lots of programmers
    think they can hold the bug list in their heads. Nonsense. I can't
    remember more than two or three bugs at a time, and the next morning,
    or in the rush of shipping, they are forgotten. You absolutely have to
    keep track of bugs formally.
    
    Bug databases can be complicated or simple. A minimal useful bug
    database must include the following data for every bug:
    
      - complete steps to reproduce the bug
      - expected behavior
      - observed (buggy) behavior
      - who it's assigned to
      - whether it has been fixed or not
    
    If the complexity of bug tracking software is the only thing stopping
    you from tracking your bugs, just make a simple 5 column table with
    these crucial fields and start using it.
#+end_quote
    
** Elements of a good bug report

Again citing Joel Spolsky, here are the three fundamental elements
of a good bug report:

#+begin_quote
    It's pretty easy to remember the rule for a good bug report. Every
    good bug report needs exactly three things.
    
     1. Steps to reproduce,
     2. What you expected to see, and
     3. What you saw instead.
#+end_quote
