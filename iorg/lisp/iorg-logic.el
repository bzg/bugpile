;;;; iorg-logic --- generic logic for the iOrg framework. 

;;;; Requirements

;;;; Variables

(defvar iorg-classes )

;;;; Functions

;;; Helper Functions

;;; Public Functions (interactive)

(defun iorg-logic-new-class
  (project classname &optional todo &rest tags-and-attr)
  "Make a new class CLASSNAME in PROJECT.

In the iOrg context, a class is an Org file in the projects
'classes' directory which is defined under the key :classes in
the customizable variable 'iorg-projects-config'. It has one
toplevel entry and two child entries. If TODO is non nil, the
top-level has a todo state. (Optional) headline tags for the
top-level entry are read from the TAGS-AND-ATTR alist.

The two child entries are named 'class' and 'instance'. They hold
the class variables and instance variables in their property
drawers. Each class must have at least two (obligatory) headline
attributes for the 'class' entry, :iorg-super: and :ID:, that are
read from the TAGS-AND-ATTR alist or generated by Org mode. Thus,
a typical class might look similar to this:

* TODO <<classname>>                   :tags:
** class
  :PROPERTIES:
  :iorg-super: html
  :ID:       5bccaee7-201b-4f3d-8430-4dbf79064761
  :<<classname>>-type_ALL: bug feature
  :END:
** instance
  :PROPERTIES:
  :<<classname>>-type: bug
  :<<classname>>-author: nil
  :<<classname>>-priority: medium
  :END:

Each class has at least one super-class specified
by :iorg-super:, 'object' is at the top of the hierarchy and has
itself the pseudo-super-class 'root', that doesn't really exist.

The properties themselves can be classified into four categories:

1. Standard Org mode properties like :ID:

2. Properties with the :iorg-xyz: prefix that store general
information relevant for the iOrg framework

3. Properties with the :html-xyz: prefix that store information
relevant for the html-export by org-export.el with the derived
iorg-html backend.

4. Properties with the :<<classname>>-xyz: prefix, where
<<classname>> stands for the class name given by function
argument CLASSNAME, that store specific information relevant for
the class.

The properties of the 'class' entry are like class variables in
object-oriented programming. Their values are constant for all
instances/objects of the class, therefore they are stored only
once in file-local-variables that allow for quick access.

The properties of the 'instance' entry are like instance
variables in object-oriented programming. Their values vary
between instances/objects of the class, therefore they are stored
as headline attributes of every single object (which are entries
in Org files themselves). In the class file, an instance
attribute's value can be set either to nil or to a default
value.

For each non-abstract class (classes tagged as :abstact: can't be
instantiated) there exists one Org file with all the
objects (instances) of that class."

  (interactive "sProject: \nsClass name: ")
  )

(defun iorg-logic-new-object (project class)
  "Instantiate a new object of CLASS in PROJECT.

In the context of iOrg, an object is a top-level entry in the Org
file for its class (<<class>>-obj.org), located in the projects
'objects' directory which is defined under the key :objects in
the customizable variable 'iorg-projects-config'. 

Each object has a headline and optional todo's and tags. The
instance attributes of the class are represented by
headline-properties of the object. Thus, two typical objects of
class <<classname>> might look similar to this:

# -*- variable-name:default-value-*-
* TODO <<classname>>                   :tags:
  :PROPERTIES:
  :ID:       7bcbaee7-2e1b-4f3d-8430-edbf79364761
  :iorg-x:  value1
  :html-edit:  link
  :<<classname>>-type: feature
  :<<classname>>-author: author1
  :<<classname>>-priority: high
  :END:
* DONE <<classname>>                   :tags:
  :PROPERTIES:
  :ID:       4bc3aee5-2ed21b-433d-8630-fdbf59364761
  :iorg-x:  value3
  :html-edit:  button
  :<<classname>>-type: bug
  :<<classname>>-author: author2
  :<<classname>>-priority: medium
  :END:

At the top of the Org file, the class attributes of the class and
its super-classes are defined as file-local-variables. Then the
objects follow, each as an top-level entry.

The global :ID: attribute is set by Org mode and obligatory for
each object. The :<<classname>>-xyz: attributes are read from the
objects class (its instance attributes). All instance attributes
from the super-classes of the class are included too, therefore
attributes with other prefixes (like :iorg-xyz: or :html-xyz:)
might appear in an objects property drawer."

  (interactive "sProject: \nfClass: ")
  (cond ((not (and (non-empty-string-p project)
                   (assoc project iorg-projects-config)))
         (message "%s"
                  (concat "Project not registered in customizable "
                          "variable 'iorg-projects-config'")))
        ((not (file-exists-p class))
         (message "Class doesn't exist"))
        (t
         (with-current-buffer (find-file class)
          (org-check-for-org-mode)
          (while
              (progn
                ;; do the work
                (iorg-util-goto-first-entry)
                


                ;; test the condition
                (not
                 (string=
                  (car
                   (org-entry-get-multivalued-property
                    (point) iorg-super))
                  "root"))))))))

;; I can't remember exactly what Org actions added unique ID's to every
;; subheading, but I'm confident that there is precedent for doing this.

;; The `org-id-get-create' function may be used to add a global unique ID
;; to a heading.  Then you can jump to that ID from anywhere using the
;; `org-id-goto' function.  This should be a great way to identify and
;; return to headings.

               

;;; Public Functions (non-interactive)

(provide 'iorg-logic)
